{"hash":"b287db4af5f7b01633839897e1a0825db9734c39","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, NgModule } from '@angular/core';\nimport { get, each } from 'lodash';\nimport { Formio } from 'formiojs';\nimport * as i2 from '@formio/angular';\nimport { extendRouter, FormioModule } from '@formio/angular';\nimport * as i1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\nclass FormioAuthConfig {\n}\nFormioAuthConfig.ɵfac = function FormioAuthConfig_Factory(t) { return new (t || FormioAuthConfig)(); };\nFormioAuthConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioAuthConfig, factory: FormioAuthConfig.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthConfig, [{\n        type: Injectable\n    }], null, null); })();\nvar FormioOauthType;\n(function (FormioOauthType) {\n    FormioOauthType[\"okta\"] = \"okta\";\n    FormioOauthType[\"saml\"] = \"saml\";\n})(FormioOauthType || (FormioOauthType = {}));\n\nclass FormioAuthService {\n    constructor(appConfig, config) {\n        this.appConfig = appConfig;\n        this.config = config;\n        this.authenticated = false;\n        this.formAccess = {};\n        this.submissionAccess = {};\n        this.is = {};\n        this.user = null;\n        if (this.appConfig && this.appConfig.appUrl) {\n            Formio.setBaseUrl(this.appConfig.apiUrl);\n            Formio.setProjectUrl(this.appConfig.appUrl);\n            Formio.formOnly = !!this.appConfig.formOnly;\n        }\n        else {\n            console.error('You must provide an AppConfig within your application!');\n        }\n        this.loginForm =\n            this.appConfig.appUrl +\n                '/' +\n                get(this.config, 'login.form', 'user/login');\n        this.registerForm =\n            this.appConfig.appUrl +\n                '/' +\n                get(this.config, 'register.form', 'user/register');\n        this.resetPassForm =\n            this.appConfig.appUrl +\n                '/' +\n                get(this.config, 'register.form', 'resetpass');\n        this.onLogin = new EventEmitter();\n        this.onLogout = new EventEmitter();\n        this.onRegister = new EventEmitter();\n        this.onUser = new EventEmitter();\n        this.onError = new EventEmitter();\n        this.ready = new Promise((resolve, reject) => {\n            this.readyResolve = resolve;\n            this.readyReject = reject;\n        });\n        // Register for the core events.\n        Formio.events.on('formio.badToken', () => this.logoutError());\n        Formio.events.on('formio.sessionExpired', () => this.logoutError());\n        if (!this.config.delayAuth) {\n            this.init();\n        }\n    }\n    onLoginSubmit(submission) {\n        this.setUser(submission);\n        this.onLogin.emit(submission);\n    }\n    onRegisterSubmit(submission) {\n        this.setUser(submission);\n        this.onRegister.emit(submission);\n    }\n    onResetPassSubmit(submission) {\n        this.onResetPass.emit(submission);\n    }\n    init() {\n        this.projectReady = Formio.makeStaticRequest(this.appConfig.appUrl).then((project) => {\n            each(project.access, (access) => {\n                this.formAccess[access.type] = access.roles;\n            });\n        }, () => {\n            this.formAccess = {};\n            return null;\n        });\n        // Get the access for this project.\n        this.accessReady = Formio.makeStaticRequest(this.appConfig.appUrl + '/access').then((access) => {\n            each(access.forms, (form) => {\n                this.submissionAccess[form.name] = {};\n                form.submissionAccess.forEach((subAccess) => {\n                    this.submissionAccess[form.name][subAccess.type] = subAccess.roles;\n                });\n            });\n            this.roles = access.roles;\n            return access;\n        }, () => {\n            this.roles = {};\n            return null;\n        });\n        let currentUserPromise;\n        if (this.config.oauth) {\n            // Make a fix to the hash to remove starting \"/\" that angular might put there.\n            if (window.location.hash && window.location.hash.match(/^#\\/access_token/)) {\n                history.pushState(null, null, window.location.hash.replace(/^#\\/access_token/, '#access_token'));\n            }\n            // Initiate the SSO if they provide oauth settings.\n            currentUserPromise = Formio.ssoInit(this.config.oauth.type, this.config.oauth.options);\n        }\n        else {\n            currentUserPromise = Formio.currentUser();\n        }\n        this.userReady = currentUserPromise.then((user) => {\n            this.setUser(user);\n            return user;\n        });\n        // Trigger we are redy when all promises have resolved.\n        if (this.accessReady) {\n            this.accessReady\n                .then(() => this.projectReady)\n                .then(() => this.userReady)\n                .then(() => this.readyResolve(true))\n                .catch((err) => this.readyReject(err));\n        }\n    }\n    setUser(user) {\n        const namespace = Formio.namespace || 'formio';\n        if (user) {\n            this.user = user;\n            localStorage.setItem(`${namespace}AppUser`, JSON.stringify(user));\n            this.setUserRoles();\n        }\n        else {\n            this.user = null;\n            this.is = {};\n            localStorage.removeItem(`${namespace}AppUser`);\n            Formio.clearCache();\n            Formio.setUser(null);\n        }\n        this.authenticated = !!Formio.getToken();\n        this.onUser.emit(this.user);\n    }\n    setUserRoles() {\n        if (this.accessReady) {\n            this.accessReady.then(() => {\n                each(this.roles, (role, roleName) => {\n                    if (this.user.roles.indexOf(role._id) !== -1) {\n                        this.is[roleName] = true;\n                    }\n                });\n            });\n        }\n    }\n    logoutError() {\n        this.setUser(null);\n        const namespace = Formio.namespace || 'formio';\n        localStorage.removeItem(`${namespace}Token`);\n        this.onError.emit();\n    }\n    logout() {\n        this.setUser(null);\n        const namespace = Formio.namespace || 'formio';\n        localStorage.removeItem(`${namespace}Token`);\n        Formio.logout()\n            .then(() => this.onLogout.emit())\n            .catch(() => this.logoutError());\n    }\n}\nFormioAuthService.ɵfac = function FormioAuthService_Factory(t) { return new (t || FormioAuthService)(i0.ɵɵinject(i2.FormioAppConfig), i0.ɵɵinject(FormioAuthConfig)); };\nFormioAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioAuthService, factory: FormioAuthService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthService, [{\n        type: Injectable\n    }], function () { return [{ type: i2.FormioAppConfig }, { type: FormioAuthConfig }]; }, null); })();\n\nclass FormioAuthComponent {\n}\nFormioAuthComponent.ɵfac = function FormioAuthComponent_Factory(t) { return new (t || FormioAuthComponent)(); };\nFormioAuthComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioAuthComponent, selectors: [[\"ng-component\"]], decls: 14, vars: 0, consts: [[1, \"card\", \"card-primary\", \"panel\", \"panel-default\"], [1, \"card-header\", \"panel-heading\"], [1, \"nav\", \"nav-tabs\", \"card-header-tabs\"], [\"role\", \"presentation\", \"routerLinkActive\", \"active\", 1, \"nav-item\"], [\"routerLink\", \"login\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"routerLink\", \"register\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"routerLink\", \"resetpass\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [1, \"card-body\", \"panel-body\"]], template: function FormioAuthComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"ul\", 2)(3, \"li\", 3)(4, \"a\", 4);\n        i0.ɵɵtext(5, \"Login\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"li\", 3)(7, \"a\", 5);\n        i0.ɵɵtext(8, \"Register\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"li\", 3)(10, \"a\", 6);\n        i0.ɵɵtext(11, \"Reset Password\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(12, \"div\", 7);\n        i0.ɵɵelement(13, \"router-outlet\");\n        i0.ɵɵelementEnd()();\n    } }, directives: [i1.RouterLinkActive, i1.RouterLinkWithHref, i1.RouterOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthComponent, [{\n        type: Component,\n        args: [{ template: \"<div class=\\\"card card-primary panel panel-default\\\">\\n  <div class=\\\"card-header panel-heading\\\">\\n    <ul class=\\\"nav nav-tabs card-header-tabs\\\">\\n      <li class=\\\"nav-item\\\" role=\\\"presentation\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"login\\\" routerLinkActive=\\\"active\\\">Login</a></li>\\n      <li class=\\\"nav-item\\\" role=\\\"presentation\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"register\\\" routerLinkActive=\\\"active\\\">Register</a></li>\\n      <li class=\\\"nav-item\\\" role=\\\"presentation\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"resetpass\\\" routerLinkActive=\\\"active\\\">Reset Password</a></li>\\n    </ul>\\n  </div>\\n  <div class=\\\"card-body panel-body\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\" }]\n    }], null, null); })();\n\nclass FormioAuthLoginComponent {\n    constructor(service) {\n        this.service = service;\n    }\n}\nFormioAuthLoginComponent.ɵfac = function FormioAuthLoginComponent_Factory(t) { return new (t || FormioAuthLoginComponent)(i0.ɵɵdirectiveInject(FormioAuthService)); };\nFormioAuthLoginComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioAuthLoginComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 1, consts: [[3, \"src\", \"submit\"]], template: function FormioAuthLoginComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"formio\", 0);\n        i0.ɵɵlistener(\"submit\", function FormioAuthLoginComponent_Template_formio_submit_0_listener($event) { return ctx.service.onLoginSubmit($event); });\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"src\", ctx.service.loginForm);\n    } }, directives: [i2.FormioComponent], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthLoginComponent, [{\n        type: Component,\n        args: [{ template: \"<formio [src]=\\\"service.loginForm\\\" (submit)=\\\"service.onLoginSubmit($event)\\\"></formio>\\n\" }]\n    }], function () { return [{ type: FormioAuthService }]; }, null); })();\n\nclass FormioAuthRegisterComponent {\n    constructor(service) {\n        this.service = service;\n    }\n}\nFormioAuthRegisterComponent.ɵfac = function FormioAuthRegisterComponent_Factory(t) { return new (t || FormioAuthRegisterComponent)(i0.ɵɵdirectiveInject(FormioAuthService)); };\nFormioAuthRegisterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioAuthRegisterComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 1, consts: [[3, \"src\", \"submit\"]], template: function FormioAuthRegisterComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"formio\", 0);\n        i0.ɵɵlistener(\"submit\", function FormioAuthRegisterComponent_Template_formio_submit_0_listener($event) { return ctx.service.onRegisterSubmit($event); });\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"src\", ctx.service.registerForm);\n    } }, directives: [i2.FormioComponent], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthRegisterComponent, [{\n        type: Component,\n        args: [{ template: \"<formio [src]=\\\"service.registerForm\\\" (submit)=\\\"service.onRegisterSubmit($event)\\\"></formio>\\n\" }]\n    }], function () { return [{ type: FormioAuthService }]; }, null); })();\n\nclass FormioResetPassComponent {\n    constructor(service) {\n        this.service = service;\n    }\n}\nFormioResetPassComponent.ɵfac = function FormioResetPassComponent_Factory(t) { return new (t || FormioResetPassComponent)(i0.ɵɵdirectiveInject(FormioAuthService)); };\nFormioResetPassComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResetPassComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 1, consts: [[3, \"src\", \"submit\"]], template: function FormioResetPassComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"formio\", 0);\n        i0.ɵɵlistener(\"submit\", function FormioResetPassComponent_Template_formio_submit_0_listener($event) { return ctx.service.onResetPassSubmit($event); });\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"src\", ctx.service.resetPassForm);\n    } }, directives: [i2.FormioComponent], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResetPassComponent, [{\n        type: Component,\n        args: [{ template: \"<formio [src]=\\\"service.resetPassForm\\\" (submit)=\\\"service.onResetPassSubmit($event)\\\"></formio>\\n\" }]\n    }], function () { return [{ type: FormioAuthService }]; }, null); })();\n\nfunction FormioAuthRoutes(config) {\n    return [\n        {\n            path: '',\n            component: config && config.auth ? config.auth : FormioAuthComponent,\n            children: [\n                {\n                    path: '',\n                    redirectTo: 'login',\n                    pathMatch: 'full'\n                },\n                {\n                    path: 'login',\n                    component: config && config.login ? config.login : FormioAuthLoginComponent\n                },\n                {\n                    path: 'register',\n                    component: config && config.register ? config.register : FormioAuthRegisterComponent\n                },\n                {\n                    path: 'resetpass',\n                    component: config && config.resetpass ? config.resetpass : FormioResetPassComponent\n                }\n            ]\n        }\n    ];\n}\n\nclass FormioAuth {\n    static forRoot(config) {\n        return extendRouter(FormioAuth, config, FormioAuthRoutes);\n    }\n    static forChild(config) {\n        return extendRouter(FormioAuth, config, FormioAuthRoutes);\n    }\n}\nFormioAuth.ɵfac = function FormioAuth_Factory(t) { return new (t || FormioAuth)(); };\nFormioAuth.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FormioAuth });\nFormioAuth.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            FormioModule,\n            RouterModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuth, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormioModule,\n                    RouterModule\n                ],\n                declarations: [\n                    FormioAuthComponent,\n                    FormioAuthLoginComponent,\n                    FormioAuthRegisterComponent,\n                    FormioResetPassComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormioAuth, { declarations: [FormioAuthComponent,\n        FormioAuthLoginComponent,\n        FormioAuthRegisterComponent,\n        FormioResetPassComponent], imports: [CommonModule,\n        FormioModule,\n        RouterModule] }); })();\n\n/*\n * Public API Surface of angular-formio\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormioAuth, FormioAuthComponent, FormioAuthConfig, FormioAuthLoginComponent, FormioAuthRegisterComponent, FormioAuthRoutes, FormioAuthService, FormioResetPassComponent };\n//# sourceMappingURL=formio-angular-auth.mjs.map\n","map":{"version":3,"file":"formio-angular-auth.mjs","sources":["../../../projects/angular-formio/auth/src/auth.config.ts","../../../projects/angular-formio/auth/src/auth.service.ts","../../../projects/angular-formio/auth/src/auth.component.ts","../../../projects/angular-formio/auth/src/auth.component.html","../../../projects/angular-formio/auth/src/login/login.component.ts","../../../projects/angular-formio/auth/src/login/login.component.html","../../../projects/angular-formio/auth/src/register/register.component.ts","../../../projects/angular-formio/auth/src/register/register.component.html","../../../projects/angular-formio/auth/src/resetpass/resetpass.component.ts","../../../projects/angular-formio/auth/src/resetpass/resetpass.component.html","../../../projects/angular-formio/auth/src/auth.routes.ts","../../../projects/angular-formio/auth/src/auth.module.ts","../../../projects/angular-formio/auth/src/public_api.ts","../../../projects/angular-formio/auth/src/formio-angular-auth.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FormioAuthFormConfig {\n  path?: string;\n  form?: string;\n  component?: any;\n}\n\nexport interface FormioAuthRouteConfig {\n  auth?: any;\n  login?: any;\n  register?: any;\n  resetpass?: any;\n}\n\n@Injectable()\nexport class FormioAuthConfig {\n  component?: any;\n  delayAuth?: any;\n  login?: FormioAuthFormConfig;\n  register?: FormioAuthFormConfig;\n  resetpass?: FormioAuthFormConfig;\n  oauth?: FormioOAuthConfig;\n}\n\n\nexport interface FormioOAuthConfig {\n  type: FormioOauthType;\n  options: FormioOktaConfig | FormioSamlConfig;\n}\n\nexport enum FormioOauthType {\n  okta = 'okta',\n  saml = 'saml',\n}\n\nexport interface FormioOktaConfig extends OktaConfig {\n  formio?: any;\n}\n\nexport interface FormioSamlConfig {\n  relay: string;\n}\n\n// for more details about Okta configuration options see https://github.com/okta/okta-auth-js#configuration-reference\nexport interface OktaConfig {\n  url?: string;\n  tokenManager?: OktaTokenManagerConfig;\n  issuer?: string;\n  clientId?: string;\n  redirectUri?: string;\n  postLogoutRedirectUri?: string;\n  pkce?: boolean;\n  authorizeUrl?: string;\n  userinfoUrl?: string;\n  tokenUrl?: string;\n  ignoreSignature?: boolean;\n  maxClockSkew?: number;\n  scopes?: string[];\n  httpRequestClient?: Function;\n}\n\nexport interface OktaTokenManagerConfig {\n  storage?: string | {\n    getItem?: Function;\n    setItem?: Function;\n  };\n  secure?: boolean;\n  autoRenew?: boolean;\n  expireEarlySeconds?: number;\n  storageKey?: string;\n}\n","import { EventEmitter, Injectable, Inject } from '@angular/core';\nimport { FormioAuthConfig } from './auth.config';\nimport { FormioAppConfig } from '@formio/angular';\nimport { get, each } from 'lodash';\nimport { Formio } from 'formiojs';\n\n@Injectable()\nexport class FormioAuthService {\n  public user: any;\n  public authenticated = false;\n\n  public loginForm: string;\n  public onLogin: EventEmitter<object>;\n  public onLogout: EventEmitter<object>;\n\n  public registerForm: string;\n  public onRegister: EventEmitter<object>;\n  public onUser: EventEmitter<object>;\n  public onError: EventEmitter<any>;\n\n  public resetPassForm: string;\n  public onResetPass: EventEmitter<object>;\n\n  public ready: Promise<boolean>;\n  public readyResolve: any;\n  public readyReject: any;\n\n  public projectReady?: Promise<any>;\n  public accessReady?: Promise<any>;\n  public userReady?: Promise<any>;\n  public formAccess: any = {};\n  public submissionAccess: any = {};\n  public roles: any;\n  public is: any = {};\n\n  constructor(\n    public appConfig: FormioAppConfig,\n    public config: FormioAuthConfig\n  ) {\n    this.user = null;\n\n    if (this.appConfig && this.appConfig.appUrl) {\n      Formio.setBaseUrl(this.appConfig.apiUrl);\n      Formio.setProjectUrl(this.appConfig.appUrl);\n      Formio.formOnly = !!this.appConfig.formOnly;\n    } else {\n      console.error('You must provide an AppConfig within your application!');\n    }\n\n    this.loginForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'login.form', 'user/login');\n    this.registerForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'register.form', 'user/register');\n    this.resetPassForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'register.form', 'resetpass');\n    this.onLogin = new EventEmitter();\n    this.onLogout = new EventEmitter();\n    this.onRegister = new EventEmitter();\n    this.onUser = new EventEmitter();\n    this.onError = new EventEmitter();\n\n    this.ready = new Promise((resolve: any, reject: any) => {\n      this.readyResolve = resolve;\n      this.readyReject = reject;\n    });\n\n    // Register for the core events.\n    Formio.events.on('formio.badToken', () => this.logoutError());\n    Formio.events.on('formio.sessionExpired', () => this.logoutError());\n    if (!this.config.delayAuth) {\n      this.init();\n    }\n  }\n\n  onLoginSubmit(submission: object) {\n    this.setUser(submission);\n    this.onLogin.emit(submission);\n  }\n\n  onRegisterSubmit(submission: object) {\n    this.setUser(submission);\n    this.onRegister.emit(submission);\n  }\n\n  onResetPassSubmit(submission: object) {\n    this.onResetPass.emit(submission);\n  }\n\n  init() {\n    this.projectReady = Formio.makeStaticRequest(this.appConfig.appUrl).then(\n      (project: any) => {\n        each(project.access, (access: any) => {\n          this.formAccess[access.type] = access.roles;\n        });\n      },\n      (): any => {\n        this.formAccess = {};\n        return null;\n      }\n    );\n\n    // Get the access for this project.\n    this.accessReady = Formio.makeStaticRequest(\n      this.appConfig.appUrl + '/access'\n    ).then(\n      (access: any) => {\n        each(access.forms, (form: any) => {\n          this.submissionAccess[form.name] = {};\n          form.submissionAccess.forEach((subAccess: any) => {\n            this.submissionAccess[form.name][subAccess.type] = subAccess.roles;\n          });\n        });\n        this.roles = access.roles;\n        return access;\n      },\n      (): any => {\n        this.roles = {};\n        return null;\n      }\n    );\n\n    let currentUserPromise: Promise<any>;\n    if (this.config.oauth) {\n      // Make a fix to the hash to remove starting \"/\" that angular might put there.\n      if (window.location.hash && window.location.hash.match(/^#\\/access_token/)) {\n        history.pushState(null, null, window.location.hash.replace(/^#\\/access_token/, '#access_token'));\n      }\n\n      // Initiate the SSO if they provide oauth settings.\n      currentUserPromise = Formio.ssoInit(this.config.oauth.type, this.config.oauth.options);\n    } else {\n      currentUserPromise = Formio.currentUser();\n    }\n\n    this.userReady = currentUserPromise.then((user: any) => {\n      this.setUser(user);\n      return user;\n    });\n\n    // Trigger we are redy when all promises have resolved.\n    if (this.accessReady) {\n      this.accessReady\n        .then(() => this.projectReady)\n        .then(() => this.userReady)\n        .then(() => this.readyResolve(true))\n        .catch((err: any) => this.readyReject(err));\n    }\n  }\n\n  setUser(user: any) {\n    const namespace = Formio.namespace || 'formio';\n    if (user) {\n      this.user = user;\n      localStorage.setItem(`${namespace}AppUser`, JSON.stringify(user));\n      this.setUserRoles();\n    } else {\n      this.user = null;\n      this.is = {};\n      localStorage.removeItem(`${namespace}AppUser`);\n      Formio.clearCache();\n      Formio.setUser(null);\n    }\n\n    this.authenticated = !!Formio.getToken();\n    this.onUser.emit(this.user);\n  }\n\n  setUserRoles() {\n    if (this.accessReady) {\n      this.accessReady.then(() => {\n        each(this.roles, (role: any, roleName: string) => {\n          if (this.user.roles.indexOf(role._id) !== -1) {\n            this.is[roleName] = true;\n          }\n        });\n      });\n    }\n  }\n\n  logoutError() {\n    this.setUser(null);\n    const namespace = Formio.namespace || 'formio';\n    localStorage.removeItem(`${namespace}Token`);\n    this.onError.emit();\n  }\n\n  logout() {\n    this.setUser(null);\n    const namespace = Formio.namespace || 'formio';\n    localStorage.removeItem(`${namespace}Token`);\n    Formio.logout()\n      .then(() => this.onLogout.emit())\n      .catch(() => this.logoutError());\n  }\n}\n","import { Component } from '@angular/core';\n@Component({\n  templateUrl: './auth.component.html'\n})\nexport class FormioAuthComponent {}\n","<div class=\"card card-primary panel panel-default\">\n  <div class=\"card-header panel-heading\">\n    <ul class=\"nav nav-tabs card-header-tabs\">\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"login\" routerLinkActive=\"active\">Login</a></li>\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"register\" routerLinkActive=\"active\">Register</a></li>\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"resetpass\" routerLinkActive=\"active\">Reset Password</a></li>\n    </ul>\n  </div>\n  <div class=\"card-body panel-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './login.component.html'\n})\nexport class FormioAuthLoginComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.loginForm\" (submit)=\"service.onLoginSubmit($event)\"></formio>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './register.component.html'\n})\nexport class FormioAuthRegisterComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.registerForm\" (submit)=\"service.onRegisterSubmit($event)\"></formio>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './resetpass.component.html'\n})\nexport class FormioResetPassComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.resetPassForm\" (submit)=\"service.onResetPassSubmit($event)\"></formio>\n","import { Routes } from '@angular/router';\nimport { FormioAuthRouteConfig } from './auth.config';\nimport { FormioAuthComponent } from './auth.component';\nimport { FormioAuthLoginComponent } from './login/login.component';\nimport { FormioAuthRegisterComponent } from './register/register.component';\nimport { FormioResetPassComponent } from './resetpass/resetpass.component';\n\nexport function FormioAuthRoutes(config?: FormioAuthRouteConfig): Routes {\n  return [\n    {\n      path: '',\n      component: config && config.auth ? config.auth : FormioAuthComponent,\n      children: [\n        {\n          path: '',\n          redirectTo: 'login',\n          pathMatch: 'full'\n        },\n        {\n          path: 'login',\n          component: config && config.login ? config.login : FormioAuthLoginComponent\n        },\n        {\n          path: 'register',\n          component: config && config.register ? config.register : FormioAuthRegisterComponent\n        },\n        {\n          path: 'resetpass',\n          component: config && config.resetpass ? config.resetpass : FormioResetPassComponent\n        }\n      ]\n    }\n  ];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormioModule } from '@formio/angular';\nimport { FormioAuthComponent } from './auth.component';\nimport { FormioAuthLoginComponent } from './login/login.component';\nimport { FormioAuthRegisterComponent } from './register/register.component';\nimport { FormioResetPassComponent } from './resetpass/resetpass.component';\nimport { FormioAuthRouteConfig } from './auth.config';\nimport { FormioAuthRoutes } from './auth.routes';\nimport { extendRouter } from '@formio/angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormioModule,\n    RouterModule\n  ],\n  declarations: [\n    FormioAuthComponent,\n    FormioAuthLoginComponent,\n    FormioAuthRegisterComponent,\n    FormioResetPassComponent\n  ]\n})\nexport class FormioAuth {\n  static forRoot(config?: FormioAuthRouteConfig): any {\n    return extendRouter(FormioAuth, config, FormioAuthRoutes);\n  }\n  static forChild(config?: FormioAuthRouteConfig): any {\n    return extendRouter(FormioAuth, config, FormioAuthRoutes);\n  }\n}\n","/*\n * Public API Surface of angular-formio\n */\n\nexport * from './index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, NgModule } from '@angular/core';\nimport { get, each } from 'lodash';\nimport { Formio } from 'formiojs';\nimport * as i2 from '@formio/angular';\nimport { extendRouter, FormioModule } from '@formio/angular';\nimport * as i1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\nclass FormioAuthConfig {\n}\nFormioAuthConfig.ɵfac = function FormioAuthConfig_Factory(t) { return new (t || FormioAuthConfig)(); };\nFormioAuthConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioAuthConfig, factory: FormioAuthConfig.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthConfig, [{\n            type: Injectable\n        }], null, null);\n})();\nvar FormioOauthType;\n(function (FormioOauthType) {\n    FormioOauthType[\"okta\"] = \"okta\";\n    FormioOauthType[\"saml\"] = \"saml\";\n})(FormioOauthType || (FormioOauthType = {}));\n\nclass FormioAuthService {\n    constructor(appConfig, config) {\n        this.appConfig = appConfig;\n        this.config = config;\n        this.authenticated = false;\n        this.formAccess = {};\n        this.submissionAccess = {};\n        this.is = {};\n        this.user = null;\n        if (this.appConfig && this.appConfig.appUrl) {\n            Formio.setBaseUrl(this.appConfig.apiUrl);\n            Formio.setProjectUrl(this.appConfig.appUrl);\n            Formio.formOnly = !!this.appConfig.formOnly;\n        }\n        else {\n            console.error('You must provide an AppConfig within your application!');\n        }\n        this.loginForm =\n            this.appConfig.appUrl +\n                '/' +\n                get(this.config, 'login.form', 'user/login');\n        this.registerForm =\n            this.appConfig.appUrl +\n                '/' +\n                get(this.config, 'register.form', 'user/register');\n        this.resetPassForm =\n            this.appConfig.appUrl +\n                '/' +\n                get(this.config, 'register.form', 'resetpass');\n        this.onLogin = new EventEmitter();\n        this.onLogout = new EventEmitter();\n        this.onRegister = new EventEmitter();\n        this.onUser = new EventEmitter();\n        this.onError = new EventEmitter();\n        this.ready = new Promise((resolve, reject) => {\n            this.readyResolve = resolve;\n            this.readyReject = reject;\n        });\n        // Register for the core events.\n        Formio.events.on('formio.badToken', () => this.logoutError());\n        Formio.events.on('formio.sessionExpired', () => this.logoutError());\n        if (!this.config.delayAuth) {\n            this.init();\n        }\n    }\n    onLoginSubmit(submission) {\n        this.setUser(submission);\n        this.onLogin.emit(submission);\n    }\n    onRegisterSubmit(submission) {\n        this.setUser(submission);\n        this.onRegister.emit(submission);\n    }\n    onResetPassSubmit(submission) {\n        this.onResetPass.emit(submission);\n    }\n    init() {\n        this.projectReady = Formio.makeStaticRequest(this.appConfig.appUrl).then((project) => {\n            each(project.access, (access) => {\n                this.formAccess[access.type] = access.roles;\n            });\n        }, () => {\n            this.formAccess = {};\n            return null;\n        });\n        // Get the access for this project.\n        this.accessReady = Formio.makeStaticRequest(this.appConfig.appUrl + '/access').then((access) => {\n            each(access.forms, (form) => {\n                this.submissionAccess[form.name] = {};\n                form.submissionAccess.forEach((subAccess) => {\n                    this.submissionAccess[form.name][subAccess.type] = subAccess.roles;\n                });\n            });\n            this.roles = access.roles;\n            return access;\n        }, () => {\n            this.roles = {};\n            return null;\n        });\n        let currentUserPromise;\n        if (this.config.oauth) {\n            // Make a fix to the hash to remove starting \"/\" that angular might put there.\n            if (window.location.hash && window.location.hash.match(/^#\\/access_token/)) {\n                history.pushState(null, null, window.location.hash.replace(/^#\\/access_token/, '#access_token'));\n            }\n            // Initiate the SSO if they provide oauth settings.\n            currentUserPromise = Formio.ssoInit(this.config.oauth.type, this.config.oauth.options);\n        }\n        else {\n            currentUserPromise = Formio.currentUser();\n        }\n        this.userReady = currentUserPromise.then((user) => {\n            this.setUser(user);\n            return user;\n        });\n        // Trigger we are redy when all promises have resolved.\n        if (this.accessReady) {\n            this.accessReady\n                .then(() => this.projectReady)\n                .then(() => this.userReady)\n                .then(() => this.readyResolve(true))\n                .catch((err) => this.readyReject(err));\n        }\n    }\n    setUser(user) {\n        const namespace = Formio.namespace || 'formio';\n        if (user) {\n            this.user = user;\n            localStorage.setItem(`${namespace}AppUser`, JSON.stringify(user));\n            this.setUserRoles();\n        }\n        else {\n            this.user = null;\n            this.is = {};\n            localStorage.removeItem(`${namespace}AppUser`);\n            Formio.clearCache();\n            Formio.setUser(null);\n        }\n        this.authenticated = !!Formio.getToken();\n        this.onUser.emit(this.user);\n    }\n    setUserRoles() {\n        if (this.accessReady) {\n            this.accessReady.then(() => {\n                each(this.roles, (role, roleName) => {\n                    if (this.user.roles.indexOf(role._id) !== -1) {\n                        this.is[roleName] = true;\n                    }\n                });\n            });\n        }\n    }\n    logoutError() {\n        this.setUser(null);\n        const namespace = Formio.namespace || 'formio';\n        localStorage.removeItem(`${namespace}Token`);\n        this.onError.emit();\n    }\n    logout() {\n        this.setUser(null);\n        const namespace = Formio.namespace || 'formio';\n        localStorage.removeItem(`${namespace}Token`);\n        Formio.logout()\n            .then(() => this.onLogout.emit())\n            .catch(() => this.logoutError());\n    }\n}\nFormioAuthService.ɵfac = function FormioAuthService_Factory(t) { return new (t || FormioAuthService)(i0.ɵɵinject(i2.FormioAppConfig), i0.ɵɵinject(FormioAuthConfig)); };\nFormioAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioAuthService, factory: FormioAuthService.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthService, [{\n            type: Injectable\n        }], function () { return [{ type: i2.FormioAppConfig }, { type: FormioAuthConfig }]; }, null);\n})();\n\nclass FormioAuthComponent {\n}\nFormioAuthComponent.ɵfac = function FormioAuthComponent_Factory(t) { return new (t || FormioAuthComponent)(); };\nFormioAuthComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioAuthComponent, selectors: [[\"ng-component\"]], decls: 14, vars: 0, consts: [[1, \"card\", \"card-primary\", \"panel\", \"panel-default\"], [1, \"card-header\", \"panel-heading\"], [1, \"nav\", \"nav-tabs\", \"card-header-tabs\"], [\"role\", \"presentation\", \"routerLinkActive\", \"active\", 1, \"nav-item\"], [\"routerLink\", \"login\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"routerLink\", \"register\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"routerLink\", \"resetpass\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [1, \"card-body\", \"panel-body\"]], template: function FormioAuthComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"ul\", 2)(3, \"li\", 3)(4, \"a\", 4);\n            i0.ɵɵtext(5, \"Login\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(6, \"li\", 3)(7, \"a\", 5);\n            i0.ɵɵtext(8, \"Register\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"li\", 3)(10, \"a\", 6);\n            i0.ɵɵtext(11, \"Reset Password\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(12, \"div\", 7);\n            i0.ɵɵelement(13, \"router-outlet\");\n            i0.ɵɵelementEnd()();\n        }\n    }, directives: [i1.RouterLinkActive, i1.RouterLinkWithHref, i1.RouterOutlet], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthComponent, [{\n            type: Component,\n            args: [{ template: \"<div class=\\\"card card-primary panel panel-default\\\">\\n  <div class=\\\"card-header panel-heading\\\">\\n    <ul class=\\\"nav nav-tabs card-header-tabs\\\">\\n      <li class=\\\"nav-item\\\" role=\\\"presentation\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"login\\\" routerLinkActive=\\\"active\\\">Login</a></li>\\n      <li class=\\\"nav-item\\\" role=\\\"presentation\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"register\\\" routerLinkActive=\\\"active\\\">Register</a></li>\\n      <li class=\\\"nav-item\\\" role=\\\"presentation\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"resetpass\\\" routerLinkActive=\\\"active\\\">Reset Password</a></li>\\n    </ul>\\n  </div>\\n  <div class=\\\"card-body panel-body\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\" }]\n        }], null, null);\n})();\n\nclass FormioAuthLoginComponent {\n    constructor(service) {\n        this.service = service;\n    }\n}\nFormioAuthLoginComponent.ɵfac = function FormioAuthLoginComponent_Factory(t) { return new (t || FormioAuthLoginComponent)(i0.ɵɵdirectiveInject(FormioAuthService)); };\nFormioAuthLoginComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioAuthLoginComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 1, consts: [[3, \"src\", \"submit\"]], template: function FormioAuthLoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"formio\", 0);\n            i0.ɵɵlistener(\"submit\", function FormioAuthLoginComponent_Template_formio_submit_0_listener($event) { return ctx.service.onLoginSubmit($event); });\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"src\", ctx.service.loginForm);\n        }\n    }, directives: [i2.FormioComponent], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthLoginComponent, [{\n            type: Component,\n            args: [{ template: \"<formio [src]=\\\"service.loginForm\\\" (submit)=\\\"service.onLoginSubmit($event)\\\"></formio>\\n\" }]\n        }], function () { return [{ type: FormioAuthService }]; }, null);\n})();\n\nclass FormioAuthRegisterComponent {\n    constructor(service) {\n        this.service = service;\n    }\n}\nFormioAuthRegisterComponent.ɵfac = function FormioAuthRegisterComponent_Factory(t) { return new (t || FormioAuthRegisterComponent)(i0.ɵɵdirectiveInject(FormioAuthService)); };\nFormioAuthRegisterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioAuthRegisterComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 1, consts: [[3, \"src\", \"submit\"]], template: function FormioAuthRegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"formio\", 0);\n            i0.ɵɵlistener(\"submit\", function FormioAuthRegisterComponent_Template_formio_submit_0_listener($event) { return ctx.service.onRegisterSubmit($event); });\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"src\", ctx.service.registerForm);\n        }\n    }, directives: [i2.FormioComponent], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuthRegisterComponent, [{\n            type: Component,\n            args: [{ template: \"<formio [src]=\\\"service.registerForm\\\" (submit)=\\\"service.onRegisterSubmit($event)\\\"></formio>\\n\" }]\n        }], function () { return [{ type: FormioAuthService }]; }, null);\n})();\n\nclass FormioResetPassComponent {\n    constructor(service) {\n        this.service = service;\n    }\n}\nFormioResetPassComponent.ɵfac = function FormioResetPassComponent_Factory(t) { return new (t || FormioResetPassComponent)(i0.ɵɵdirectiveInject(FormioAuthService)); };\nFormioResetPassComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResetPassComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 1, consts: [[3, \"src\", \"submit\"]], template: function FormioResetPassComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"formio\", 0);\n            i0.ɵɵlistener(\"submit\", function FormioResetPassComponent_Template_formio_submit_0_listener($event) { return ctx.service.onResetPassSubmit($event); });\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"src\", ctx.service.resetPassForm);\n        }\n    }, directives: [i2.FormioComponent], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResetPassComponent, [{\n            type: Component,\n            args: [{ template: \"<formio [src]=\\\"service.resetPassForm\\\" (submit)=\\\"service.onResetPassSubmit($event)\\\"></formio>\\n\" }]\n        }], function () { return [{ type: FormioAuthService }]; }, null);\n})();\n\nfunction FormioAuthRoutes(config) {\n    return [\n        {\n            path: '',\n            component: config && config.auth ? config.auth : FormioAuthComponent,\n            children: [\n                {\n                    path: '',\n                    redirectTo: 'login',\n                    pathMatch: 'full'\n                },\n                {\n                    path: 'login',\n                    component: config && config.login ? config.login : FormioAuthLoginComponent\n                },\n                {\n                    path: 'register',\n                    component: config && config.register ? config.register : FormioAuthRegisterComponent\n                },\n                {\n                    path: 'resetpass',\n                    component: config && config.resetpass ? config.resetpass : FormioResetPassComponent\n                }\n            ]\n        }\n    ];\n}\n\nclass FormioAuth {\n    static forRoot(config) {\n        return extendRouter(FormioAuth, config, FormioAuthRoutes);\n    }\n    static forChild(config) {\n        return extendRouter(FormioAuth, config, FormioAuthRoutes);\n    }\n}\nFormioAuth.ɵfac = function FormioAuth_Factory(t) { return new (t || FormioAuth)(); };\nFormioAuth.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FormioAuth });\nFormioAuth.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            FormioModule,\n            RouterModule\n        ]] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioAuth, [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormioModule,\n                        RouterModule\n                    ],\n                    declarations: [\n                        FormioAuthComponent,\n                        FormioAuthLoginComponent,\n                        FormioAuthRegisterComponent,\n                        FormioResetPassComponent\n                    ]\n                }]\n        }], null, null);\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormioAuth, { declarations: [FormioAuthComponent,\n            FormioAuthLoginComponent,\n            FormioAuthRegisterComponent,\n            FormioResetPassComponent], imports: [CommonModule,\n            FormioModule,\n            RouterModule] });\n})();\n\n/*\n * Public API Surface of angular-formio\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormioAuth, FormioAuthComponent, FormioAuthConfig, FormioAuthLoginComponent, FormioAuthRegisterComponent, FormioAuthRoutes, FormioAuthService, FormioResetPassComponent };\n//# sourceMappingURL=formio-angular-auth.mjs.map\n","map":{"version":3,"file":"formio-angular-auth.mjs","sources":["../../../projects/angular-formio/auth/src/auth.config.ts","../../../projects/angular-formio/auth/src/auth.service.ts","../../../projects/angular-formio/auth/src/auth.component.ts","../../../projects/angular-formio/auth/src/auth.component.html","../../../projects/angular-formio/auth/src/login/login.component.ts","../../../projects/angular-formio/auth/src/login/login.component.html","../../../projects/angular-formio/auth/src/register/register.component.ts","../../../projects/angular-formio/auth/src/register/register.component.html","../../../projects/angular-formio/auth/src/resetpass/resetpass.component.ts","../../../projects/angular-formio/auth/src/resetpass/resetpass.component.html","../../../projects/angular-formio/auth/src/auth.routes.ts","../../../projects/angular-formio/auth/src/auth.module.ts","../../../projects/angular-formio/auth/src/public_api.ts","../../../projects/angular-formio/auth/src/formio-angular-auth.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FormioAuthFormConfig {\n  path?: string;\n  form?: string;\n  component?: any;\n}\n\nexport interface FormioAuthRouteConfig {\n  auth?: any;\n  login?: any;\n  register?: any;\n  resetpass?: any;\n}\n\n@Injectable()\nexport class FormioAuthConfig {\n  component?: any;\n  delayAuth?: any;\n  login?: FormioAuthFormConfig;\n  register?: FormioAuthFormConfig;\n  resetpass?: FormioAuthFormConfig;\n  oauth?: FormioOAuthConfig;\n}\n\n\nexport interface FormioOAuthConfig {\n  type: FormioOauthType;\n  options: FormioOktaConfig | FormioSamlConfig;\n}\n\nexport enum FormioOauthType {\n  okta = 'okta',\n  saml = 'saml',\n}\n\nexport interface FormioOktaConfig extends OktaConfig {\n  formio?: any;\n}\n\nexport interface FormioSamlConfig {\n  relay: string;\n}\n\n// for more details about Okta configuration options see https://github.com/okta/okta-auth-js#configuration-reference\nexport interface OktaConfig {\n  url?: string;\n  tokenManager?: OktaTokenManagerConfig;\n  issuer?: string;\n  clientId?: string;\n  redirectUri?: string;\n  postLogoutRedirectUri?: string;\n  pkce?: boolean;\n  authorizeUrl?: string;\n  userinfoUrl?: string;\n  tokenUrl?: string;\n  ignoreSignature?: boolean;\n  maxClockSkew?: number;\n  scopes?: string[];\n  httpRequestClient?: Function;\n}\n\nexport interface OktaTokenManagerConfig {\n  storage?: string | {\n    getItem?: Function;\n    setItem?: Function;\n  };\n  secure?: boolean;\n  autoRenew?: boolean;\n  expireEarlySeconds?: number;\n  storageKey?: string;\n}\n","import { EventEmitter, Injectable, Inject } from '@angular/core';\nimport { FormioAuthConfig } from './auth.config';\nimport { FormioAppConfig } from '@formio/angular';\nimport { get, each } from 'lodash';\nimport { Formio } from 'formiojs';\n\n@Injectable()\nexport class FormioAuthService {\n  public user: any;\n  public authenticated = false;\n\n  public loginForm: string;\n  public onLogin: EventEmitter<object>;\n  public onLogout: EventEmitter<object>;\n\n  public registerForm: string;\n  public onRegister: EventEmitter<object>;\n  public onUser: EventEmitter<object>;\n  public onError: EventEmitter<any>;\n\n  public resetPassForm: string;\n  public onResetPass: EventEmitter<object>;\n\n  public ready: Promise<boolean>;\n  public readyResolve: any;\n  public readyReject: any;\n\n  public projectReady?: Promise<any>;\n  public accessReady?: Promise<any>;\n  public userReady?: Promise<any>;\n  public formAccess: any = {};\n  public submissionAccess: any = {};\n  public roles: any;\n  public is: any = {};\n\n  constructor(\n    public appConfig: FormioAppConfig,\n    public config: FormioAuthConfig\n  ) {\n    this.user = null;\n\n    if (this.appConfig && this.appConfig.appUrl) {\n      Formio.setBaseUrl(this.appConfig.apiUrl);\n      Formio.setProjectUrl(this.appConfig.appUrl);\n      Formio.formOnly = !!this.appConfig.formOnly;\n    } else {\n      console.error('You must provide an AppConfig within your application!');\n    }\n\n    this.loginForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'login.form', 'user/login');\n    this.registerForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'register.form', 'user/register');\n    this.resetPassForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'register.form', 'resetpass');\n    this.onLogin = new EventEmitter();\n    this.onLogout = new EventEmitter();\n    this.onRegister = new EventEmitter();\n    this.onUser = new EventEmitter();\n    this.onError = new EventEmitter();\n\n    this.ready = new Promise((resolve: any, reject: any) => {\n      this.readyResolve = resolve;\n      this.readyReject = reject;\n    });\n\n    // Register for the core events.\n    Formio.events.on('formio.badToken', () => this.logoutError());\n    Formio.events.on('formio.sessionExpired', () => this.logoutError());\n    if (!this.config.delayAuth) {\n      this.init();\n    }\n  }\n\n  onLoginSubmit(submission: object) {\n    this.setUser(submission);\n    this.onLogin.emit(submission);\n  }\n\n  onRegisterSubmit(submission: object) {\n    this.setUser(submission);\n    this.onRegister.emit(submission);\n  }\n\n  onResetPassSubmit(submission: object) {\n    this.onResetPass.emit(submission);\n  }\n\n  init() {\n    this.projectReady = Formio.makeStaticRequest(this.appConfig.appUrl).then(\n      (project: any) => {\n        each(project.access, (access: any) => {\n          this.formAccess[access.type] = access.roles;\n        });\n      },\n      (): any => {\n        this.formAccess = {};\n        return null;\n      }\n    );\n\n    // Get the access for this project.\n    this.accessReady = Formio.makeStaticRequest(\n      this.appConfig.appUrl + '/access'\n    ).then(\n      (access: any) => {\n        each(access.forms, (form: any) => {\n          this.submissionAccess[form.name] = {};\n          form.submissionAccess.forEach((subAccess: any) => {\n            this.submissionAccess[form.name][subAccess.type] = subAccess.roles;\n          });\n        });\n        this.roles = access.roles;\n        return access;\n      },\n      (): any => {\n        this.roles = {};\n        return null;\n      }\n    );\n\n    let currentUserPromise: Promise<any>;\n    if (this.config.oauth) {\n      // Make a fix to the hash to remove starting \"/\" that angular might put there.\n      if (window.location.hash && window.location.hash.match(/^#\\/access_token/)) {\n        history.pushState(null, null, window.location.hash.replace(/^#\\/access_token/, '#access_token'));\n      }\n\n      // Initiate the SSO if they provide oauth settings.\n      currentUserPromise = Formio.ssoInit(this.config.oauth.type, this.config.oauth.options);\n    } else {\n      currentUserPromise = Formio.currentUser();\n    }\n\n    this.userReady = currentUserPromise.then((user: any) => {\n      this.setUser(user);\n      return user;\n    });\n\n    // Trigger we are redy when all promises have resolved.\n    if (this.accessReady) {\n      this.accessReady\n        .then(() => this.projectReady)\n        .then(() => this.userReady)\n        .then(() => this.readyResolve(true))\n        .catch((err: any) => this.readyReject(err));\n    }\n  }\n\n  setUser(user: any) {\n    const namespace = Formio.namespace || 'formio';\n    if (user) {\n      this.user = user;\n      localStorage.setItem(`${namespace}AppUser`, JSON.stringify(user));\n      this.setUserRoles();\n    } else {\n      this.user = null;\n      this.is = {};\n      localStorage.removeItem(`${namespace}AppUser`);\n      Formio.clearCache();\n      Formio.setUser(null);\n    }\n\n    this.authenticated = !!Formio.getToken();\n    this.onUser.emit(this.user);\n  }\n\n  setUserRoles() {\n    if (this.accessReady) {\n      this.accessReady.then(() => {\n        each(this.roles, (role: any, roleName: string) => {\n          if (this.user.roles.indexOf(role._id) !== -1) {\n            this.is[roleName] = true;\n          }\n        });\n      });\n    }\n  }\n\n  logoutError() {\n    this.setUser(null);\n    const namespace = Formio.namespace || 'formio';\n    localStorage.removeItem(`${namespace}Token`);\n    this.onError.emit();\n  }\n\n  logout() {\n    this.setUser(null);\n    const namespace = Formio.namespace || 'formio';\n    localStorage.removeItem(`${namespace}Token`);\n    Formio.logout()\n      .then(() => this.onLogout.emit())\n      .catch(() => this.logoutError());\n  }\n}\n","import { Component } from '@angular/core';\n@Component({\n  templateUrl: './auth.component.html'\n})\nexport class FormioAuthComponent {}\n","<div class=\"card card-primary panel panel-default\">\n  <div class=\"card-header panel-heading\">\n    <ul class=\"nav nav-tabs card-header-tabs\">\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"login\" routerLinkActive=\"active\">Login</a></li>\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"register\" routerLinkActive=\"active\">Register</a></li>\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"resetpass\" routerLinkActive=\"active\">Reset Password</a></li>\n    </ul>\n  </div>\n  <div class=\"card-body panel-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './login.component.html'\n})\nexport class FormioAuthLoginComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.loginForm\" (submit)=\"service.onLoginSubmit($event)\"></formio>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './register.component.html'\n})\nexport class FormioAuthRegisterComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.registerForm\" (submit)=\"service.onRegisterSubmit($event)\"></formio>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './resetpass.component.html'\n})\nexport class FormioResetPassComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.resetPassForm\" (submit)=\"service.onResetPassSubmit($event)\"></formio>\n","import { Routes } from '@angular/router';\nimport { FormioAuthRouteConfig } from './auth.config';\nimport { FormioAuthComponent } from './auth.component';\nimport { FormioAuthLoginComponent } from './login/login.component';\nimport { FormioAuthRegisterComponent } from './register/register.component';\nimport { FormioResetPassComponent } from './resetpass/resetpass.component';\n\nexport function FormioAuthRoutes(config?: FormioAuthRouteConfig): Routes {\n  return [\n    {\n      path: '',\n      component: config && config.auth ? config.auth : FormioAuthComponent,\n      children: [\n        {\n          path: '',\n          redirectTo: 'login',\n          pathMatch: 'full'\n        },\n        {\n          path: 'login',\n          component: config && config.login ? config.login : FormioAuthLoginComponent\n        },\n        {\n          path: 'register',\n          component: config && config.register ? config.register : FormioAuthRegisterComponent\n        },\n        {\n          path: 'resetpass',\n          component: config && config.resetpass ? config.resetpass : FormioResetPassComponent\n        }\n      ]\n    }\n  ];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormioModule } from '@formio/angular';\nimport { FormioAuthComponent } from './auth.component';\nimport { FormioAuthLoginComponent } from './login/login.component';\nimport { FormioAuthRegisterComponent } from './register/register.component';\nimport { FormioResetPassComponent } from './resetpass/resetpass.component';\nimport { FormioAuthRouteConfig } from './auth.config';\nimport { FormioAuthRoutes } from './auth.routes';\nimport { extendRouter } from '@formio/angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormioModule,\n    RouterModule\n  ],\n  declarations: [\n    FormioAuthComponent,\n    FormioAuthLoginComponent,\n    FormioAuthRegisterComponent,\n    FormioResetPassComponent\n  ]\n})\nexport class FormioAuth {\n  static forRoot(config?: FormioAuthRouteConfig): any {\n    return extendRouter(FormioAuth, config, FormioAuthRoutes);\n  }\n  static forChild(config?: FormioAuthRouteConfig): any {\n    return extendRouter(FormioAuth, config, FormioAuthRoutes);\n  }\n}\n","/*\n * Public API Surface of angular-formio\n */\n\nexport * from './index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}}}