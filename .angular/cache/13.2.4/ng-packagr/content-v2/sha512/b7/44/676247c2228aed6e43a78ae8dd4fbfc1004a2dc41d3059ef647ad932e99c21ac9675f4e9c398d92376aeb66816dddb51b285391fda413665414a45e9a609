{"hash":"f2486ba738411502319c5fc5d6a347468765bdb6","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Optional, Component, NgModule } from '@angular/core';\nimport * as i1 from '@formio/angular/auth';\nimport * as i1$1 from '@formio/angular';\nimport { FormioAlerts, FormioPromiseService, extendRouter, FormioModule } from '@formio/angular';\nimport Promise$1 from 'native-promise-only';\nimport { Formio, Utils } from 'formiojs';\nimport _, { each } from 'lodash';\nimport * as i2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@formio/angular/grid';\nimport { FormioGrid } from '@formio/angular/grid';\n\nclass FormioResourceConfig {\n    constructor() {\n        this.name = '';\n        this.form = '';\n        this.parents = [];\n    }\n}\nFormioResourceConfig.ɵfac = function FormioResourceConfig_Factory(t) { return new (t || FormioResourceConfig)(); };\nFormioResourceConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioResourceConfig, factory: FormioResourceConfig.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceConfig, [{\n        type: Injectable\n    }], null, null); })();\n\nclass FormioResources {\n    constructor(auth) {\n        this.auth = auth;\n        this.resources = {};\n        this.error = new EventEmitter();\n        this.onError = this.error;\n        this.resources = {\n            currentUser: {\n                resourceLoaded: this.auth.userReady\n            }\n        };\n    }\n}\nFormioResources.ɵfac = function FormioResources_Factory(t) { return new (t || FormioResources)(i0.ɵɵinject(i1.FormioAuthService)); };\nFormioResources.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioResources, factory: FormioResources.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResources, [{\n        type: Injectable\n    }], function () { return [{ type: i1.FormioAuthService }]; }, null); })();\n\nclass FormioResourceService {\n    constructor(appConfig, config, resourcesService, appRef) {\n        this.appConfig = appConfig;\n        this.config = config;\n        this.resourcesService = resourcesService;\n        this.appRef = appRef;\n        this.initialized = false;\n        this.isLoading = true;\n        this.alerts = new FormioAlerts();\n        this.refresh = new EventEmitter();\n        this.formLoaded = new Promise$1((resolve, reject) => {\n            this.formResolve = resolve;\n            this.formReject = reject;\n        });\n        this.init();\n    }\n    initialize() {\n        console.warn('FormioResourceService.initialize() has been deprecated.');\n    }\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        this.initialized = true;\n        if (this.appConfig && this.appConfig.appUrl) {\n            Formio.setBaseUrl(this.appConfig.apiUrl);\n            Formio.setProjectUrl(this.appConfig.appUrl);\n            Formio.formOnly = this.appConfig.formOnly;\n        }\n        else {\n            console.error('You must provide an AppConfig within your application!');\n        }\n        // Create the form url and load the resources.\n        this.formUrl = this.appConfig.appUrl + '/' + this.config.form;\n        this.resource = { data: {} };\n        // Add this resource service to the list of all resources in context.\n        if (this.resourcesService) {\n            this.resources = this.resourcesService.resources;\n            this.resources[this.config.name] = this;\n        }\n        return this.loadForm();\n    }\n    onError(error) {\n        this.alerts.setAlert({\n            type: 'danger',\n            message: error.message || error\n        });\n        if (this.resourcesService) {\n            this.resourcesService.error.emit(error);\n        }\n        throw error;\n    }\n    onFormError(err) {\n        this.formReject(err);\n        this.onError(err);\n    }\n    setContext(route) {\n        this.resourceId = route.snapshot.params['id'];\n        this.resource = { data: {} };\n        this.resourceUrl = this.appConfig.appUrl + '/' + this.config.form;\n        if (this.resourceId) {\n            this.resourceUrl += '/submission/' + this.resourceId;\n        }\n        this.formio = new FormioPromiseService(this.resourceUrl);\n        if (this.resourcesService) {\n            this.resources[this.config.name] = this;\n        }\n        this.loadParents();\n    }\n    loadForm() {\n        this.formFormio = new FormioPromiseService(this.formUrl);\n        this.isLoading = true;\n        this.formLoading = this.formFormio\n            .loadForm()\n            .then((form) => {\n            this.form = form;\n            this.formResolve(form);\n            this.isLoading = false;\n            this.loadParents();\n            return form;\n        }, (err) => this.onFormError(err))\n            .catch((err) => this.onFormError(err));\n        return this.formLoading;\n    }\n    loadParents() {\n        if (!this.config.parents || !this.config.parents.length) {\n            return Promise$1.resolve([]);\n        }\n        if (!this.resourcesService) {\n            console.warn('You must provide the FormioResources within your application to use nested resources.');\n            return Promise$1.resolve([]);\n        }\n        return this.formLoading.then((form) => {\n            // Iterate through the list of parents.\n            const _parentsLoaded = [];\n            this.config.parents.forEach((parent) => {\n                const resourceName = parent.resource || parent;\n                const resourceField = parent.field || parent;\n                const filterResource = parent.hasOwnProperty('filter') ? parent.filter : true;\n                if (this.resources.hasOwnProperty(resourceName) && this.resources[resourceName].resourceLoaded) {\n                    _parentsLoaded.push(this.resources[resourceName].resourceLoaded.then((resource) => {\n                        let parentPath = '';\n                        Utils.eachComponent(form.components, (component, path) => {\n                            if (component.key === resourceField) {\n                                component.hidden = true;\n                                component.clearOnHide = false;\n                                _.set(this.resource.data, path, resource);\n                                parentPath = path;\n                                return true;\n                            }\n                        });\n                        return {\n                            name: parentPath,\n                            filter: filterResource,\n                            resource\n                        };\n                    }));\n                }\n            });\n            // When all the parents have loaded, emit that to the onParents emitter.\n            return Promise$1.all(_parentsLoaded).then((parents) => {\n                this.refresh.emit({\n                    form: form,\n                    submission: this.resource\n                });\n                return parents;\n            });\n        });\n    }\n    onSubmissionError(err) {\n        this.onError(err);\n    }\n    loadResource(route) {\n        this.setContext(route);\n        this.isLoading = true;\n        this.resourceLoading = this.resourceLoaded = this.formio\n            .loadSubmission(null, { ignoreCache: true })\n            .then((resource) => {\n            this.resource = resource;\n            this.isLoading = false;\n            this.refresh.emit({\n                property: 'submission',\n                value: this.resource\n            });\n            return resource;\n        }, (err) => this.onSubmissionError(err))\n            .catch((err) => this.onSubmissionError(err));\n        return this.resourceLoading;\n    }\n    save(resource) {\n        const formio = resource._id ? this.formio : this.formFormio;\n        return formio\n            .saveSubmission(resource)\n            .then((saved) => {\n            this.resource = saved;\n            return saved;\n        }, (err) => this.onError(err))\n            .catch((err) => this.onError(err));\n    }\n    remove() {\n        return this.formio\n            .deleteSubmission()\n            .then(() => {\n            this.resource = null;\n        }, (err) => this.onError(err))\n            .catch((err) => this.onError(err));\n    }\n}\nFormioResourceService.ɵfac = function FormioResourceService_Factory(t) { return new (t || FormioResourceService)(i0.ɵɵinject(i1$1.FormioAppConfig), i0.ɵɵinject(FormioResourceConfig), i0.ɵɵinject(FormioResources, 8), i0.ɵɵinject(i0.ApplicationRef)); };\nFormioResourceService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioResourceService, factory: FormioResourceService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceService, [{\n        type: Injectable\n    }], function () { return [{ type: i1$1.FormioAppConfig }, { type: FormioResourceConfig }, { type: FormioResources, decorators: [{\n                type: Optional\n            }] }, { type: i0.ApplicationRef }]; }, null); })();\n\nfunction FormioResourceComponent_li_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 4)(1, \"a\", 7);\n    i0.ɵɵtext(2, \"Edit\");\n    i0.ɵɵelementEnd()();\n} }\nfunction FormioResourceComponent_li_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 4)(1, \"a\", 8);\n    i0.ɵɵelement(2, \"span\", 9);\n    i0.ɵɵelementEnd()();\n} }\nclass FormioResourceComponent {\n    constructor(service, route, auth) {\n        this.service = service;\n        this.route = route;\n        this.auth = auth;\n        this.perms = { delete: false, edit: false };\n        // subscribe to the route param changes, so that we could re-load the submission if navigation happens from one submission to another\n        this.paramsSubscription = this.route.params.subscribe((params) => {\n            this.init();\n        });\n    }\n    ngOnInit() {\n        this.init();\n    }\n    init() {\n        this.service.loadResource(this.route);\n        this.service.formLoaded.then((form) => {\n            this.auth.ready.then(() => {\n                this.service.resourceLoaded.then((resource) => {\n                    this.service.formFormio.userPermissions(this.auth.user, form, resource).then((perms) => {\n                        this.perms.delete = perms.delete;\n                        this.perms.edit = perms.edit;\n                    });\n                });\n            });\n        });\n    }\n    ngOnDestroy() {\n        if (this.paramsSubscription) {\n            this.paramsSubscription.unsubscribe();\n        }\n    }\n}\nFormioResourceComponent.ɵfac = function FormioResourceComponent_Factory(t) { return new (t || FormioResourceComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i1.FormioAuthService)); };\nFormioResourceComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceComponent, selectors: [[\"ng-component\"]], decls: 10, vars: 2, consts: [[1, \"nav\", \"nav-tabs\", 2, \"margin-bottom\", \"10px\"], [1, \"nav-item\"], [\"routerLink\", \"../\", 1, \"nav-link\"], [1, \"fa\", \"fa-chevron-left\", \"glyphicon\", \"glyphicon-chevron-left\"], [\"routerLinkActive\", \"active\", 1, \"nav-item\"], [\"routerLink\", \"view\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"class\", \"nav-item\", \"routerLinkActive\", \"active\", 4, \"ngIf\"], [\"routerLink\", \"edit\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"routerLink\", \"delete\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [1, \"fa\", \"fa-trash\", \"glyphicon\", \"glyphicon-trash\"]], template: function FormioResourceComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ul\", 0)(1, \"li\", 1)(2, \"a\", 2);\n        i0.ɵɵelement(3, \"em\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"li\", 4)(5, \"a\", 5);\n        i0.ɵɵtext(6, \"View\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(7, FormioResourceComponent_li_7_Template, 3, 0, \"li\", 6);\n        i0.ɵɵtemplate(8, FormioResourceComponent_li_8_Template, 3, 0, \"li\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"router-outlet\");\n    } if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.perms.edit);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.perms.delete);\n    } }, directives: [i2.RouterLinkWithHref, i2.RouterLinkActive, i4.NgIf, i2.RouterOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceComponent, [{\n        type: Component,\n        args: [{ template: \"<ul class=\\\"nav nav-tabs\\\" style=\\\"margin-bottom: 10px\\\">\\n  <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"../\\\"><em class=\\\"fa fa-chevron-left glyphicon glyphicon-chevron-left\\\"></em></a></li>\\n  <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"view\\\" routerLinkActive=\\\"active\\\">View</a></li>\\n  <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" *ngIf=\\\"perms.edit\\\"><a class=\\\"nav-link\\\" routerLink=\\\"edit\\\" routerLinkActive=\\\"active\\\">Edit</a></li>\\n  <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" *ngIf=\\\"perms.delete\\\"><a class=\\\"nav-link\\\" routerLink=\\\"delete\\\" routerLinkActive=\\\"active\\\"><span class=\\\"fa fa-trash glyphicon glyphicon-trash\\\"></span></a></li>\\n</ul>\\n<router-outlet></router-outlet>\\n\" }]\n    }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i1.FormioAuthService }]; }, null); })();\n\nclass FormioResourceViewComponent {\n    constructor(service, config) {\n        this.service = service;\n        this.config = config;\n        this.submission = { data: {} };\n    }\n    ngOnDestroy() {\n        Formio.clearCache();\n    }\n}\nFormioResourceViewComponent.ɵfac = function FormioResourceViewComponent_Factory(t) { return new (t || FormioResourceViewComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(FormioResourceConfig)); };\nFormioResourceViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceViewComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 4, consts: [[3, \"form\", \"submission\", \"hideComponents\", \"readOnly\"]], template: function FormioResourceViewComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"formio\", 0);\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"form\", ctx.service.form)(\"submission\", ctx.service.resource)(\"hideComponents\", ctx.config.parents)(\"readOnly\", true);\n    } }, directives: [i1$1.FormioComponent], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceViewComponent, [{\n        type: Component,\n        args: [{ template: \"<formio\\n  [form]=\\\"service.form\\\"\\n  [submission]=\\\"service.resource\\\"\\n  [hideComponents]=\\\"config.parents\\\"\\n  [readOnly]=\\\"true\\\"\\n></formio>\\n\" }]\n    }], function () { return [{ type: FormioResourceService }, { type: FormioResourceConfig }]; }, null); })();\n\nclass FormioResourceEditComponent {\n    constructor(service, route, router, config) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.triggerError = new EventEmitter();\n        this.submission = { data: {} };\n    }\n    onSubmit(submission) {\n        const edit = this.service.resource;\n        edit.data = submission.data;\n        this.service.save(edit)\n            .then(() => {\n            this.router.navigate(['../', 'view'], { relativeTo: this.route });\n        })\n            .catch((err) => this.triggerError.emit(err));\n    }\n    ngOnDestroy() {\n        Formio.clearCache();\n    }\n}\nFormioResourceEditComponent.ɵfac = function FormioResourceEditComponent_Factory(t) { return new (t || FormioResourceEditComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(FormioResourceConfig)); };\nFormioResourceEditComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceEditComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 3, consts: [[3, \"form\", \"submission\", \"error\", \"submit\"]], template: function FormioResourceEditComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"formio\", 0);\n        i0.ɵɵlistener(\"submit\", function FormioResourceEditComponent_Template_formio_submit_0_listener($event) { return ctx.onSubmit($event); });\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"form\", ctx.service.form)(\"submission\", ctx.service.resource)(\"error\", ctx.triggerError);\n    } }, directives: [i1$1.FormioComponent], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceEditComponent, [{\n        type: Component,\n        args: [{ template: \"<formio\\n  [form]=\\\"service.form\\\"\\n  [submission]=\\\"service.resource\\\"\\n  [error]=\\\"triggerError\\\"\\n  (submit)=\\\"onSubmit($event)\\\"\\n></formio>\\n\" }]\n    }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: FormioResourceConfig }]; }, null); })();\n\nclass FormioResourceDeleteComponent {\n    constructor(service, route, router) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n    }\n    onDelete() {\n        this.service.remove().then(() => {\n            this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n    }\n    onCancel() {\n        this.router.navigate(['../', 'view'], { relativeTo: this.route });\n    }\n}\nFormioResourceDeleteComponent.ɵfac = function FormioResourceDeleteComponent_Factory(t) { return new (t || FormioResourceDeleteComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router)); };\nFormioResourceDeleteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceDeleteComponent, selectors: [[\"ng-component\"]], decls: 7, vars: 0, consts: [[1, \"btn-toolbar\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 2, \"margin-right\", \"10px\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]], template: function FormioResourceDeleteComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\");\n        i0.ɵɵtext(1, \"Are you sure you wish to delete this record?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function FormioResourceDeleteComponent_Template_button_click_3_listener() { return ctx.onDelete(); });\n        i0.ɵɵtext(4, \"Yes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function FormioResourceDeleteComponent_Template_button_click_5_listener() { return ctx.onCancel(); });\n        i0.ɵɵtext(6, \"No\");\n        i0.ɵɵelementEnd()();\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceDeleteComponent, [{\n        type: Component,\n        args: [{ template: \"<h3>Are you sure you wish to delete this record?</h3>\\n<div class=\\\"btn-toolbar\\\">\\n  <button type=\\\"button\\\" (click)=\\\"onDelete()\\\" class=\\\"btn btn-danger\\\" style=\\\"margin-right: 10px;\\\">Yes</button>\\n  <button type=\\\"button\\\" (click)=\\\"onCancel()\\\" class=\\\"btn btn-danger\\\">No</button>\\n</div>\\n\" }]\n    }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; }, null); })();\n\nfunction FormioResourceCreateComponent_h3_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\", 2)(1, \"a\", 3);\n    i0.ɵɵelement(2, \"em\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" | New \", ctx_r0.service.form.title, \"\\n\");\n} }\nclass FormioResourceCreateComponent {\n    constructor(service, route, router, config) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.onError = new EventEmitter();\n        this.onSuccess = new EventEmitter();\n    }\n    ngOnInit() {\n        this.service.setContext(this.route);\n    }\n    onSubmit(submission) {\n        this.service\n            .save(submission)\n            .then(() => {\n            this.router.navigate(['../', this.service.resource._id, 'view'], {\n                relativeTo: this.route\n            });\n        })\n            .catch((err) => this.onError.emit(err));\n    }\n}\nFormioResourceCreateComponent.ɵfac = function FormioResourceCreateComponent_Factory(t) { return new (t || FormioResourceCreateComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(FormioResourceConfig)); };\nFormioResourceCreateComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceCreateComponent, selectors: [[\"ng-component\"]], decls: 2, vars: 6, consts: [[\"style\", \"margin-top:0;\", 4, \"ngIf\"], [3, \"form\", \"submission\", \"refresh\", \"error\", \"success\", \"submit\"], [2, \"margin-top\", \"0\"], [\"routerLink\", \"../\", 1, \"back-button\"], [1, \"fa\", \"fa-chevron-left\", \"glyphicon\", \"glyphicon-chevron-left\"]], template: function FormioResourceCreateComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵtemplate(0, FormioResourceCreateComponent_h3_0_Template, 4, 1, \"h3\", 0);\n        i0.ɵɵelementStart(1, \"formio\", 1);\n        i0.ɵɵlistener(\"submit\", function FormioResourceCreateComponent_Template_formio_submit_1_listener($event) { return ctx.onSubmit($event); });\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.service.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"form\", ctx.service.form)(\"submission\", ctx.service.resource)(\"refresh\", ctx.service.refresh)(\"error\", ctx.onError)(\"success\", ctx.onSuccess);\n    } }, directives: [i4.NgIf, i2.RouterLinkWithHref, i1$1.FormioComponent], styles: [\".back-button[_ngcontent-%COMP%]{font-size:.8em}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceCreateComponent, [{\n        type: Component,\n        args: [{ template: \"<h3 *ngIf=\\\"service.form\\\" style=\\\"margin-top:0;\\\">\\n  <a routerLink=\\\"../\\\" class=\\\"back-button\\\">\\n    <em class=\\\"fa fa-chevron-left glyphicon glyphicon-chevron-left\\\"></em>\\n  </a> | New {{ service.form.title }}\\n</h3>\\n<formio\\n  [form]=\\\"service.form\\\"\\n  [submission]=\\\"service.resource\\\"\\n  [refresh]=\\\"service.refresh\\\"\\n  [error]=\\\"onError\\\"\\n  [success]=\\\"onSuccess\\\"\\n  (submit)=\\\"onSubmit($event)\\\"\\n></formio>\\n\", styles: [\".back-button{font-size:.8em}\\n\"] }]\n    }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: FormioResourceConfig }]; }, null); })();\n\nclass FormioResourceIndexComponent {\n    constructor(service, route, router, config, cdr, ngZone) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n    }\n    ngOnInit() {\n        this.gridQuery = {};\n        this.service.setContext(this.route);\n        this.service.formLoaded.then(() => {\n            if (this.service &&\n                this.config.parents &&\n                this.config.parents.length) {\n                this.service.loadParents().then((parents) => {\n                    each(parents, (parent) => {\n                        if (parent && parent.filter) {\n                            this.gridQuery['data.' + parent.name + '._id'] =\n                                parent.resource._id;\n                        }\n                    });\n                    // Set the source to load the grid.\n                    this.gridSrc = this.service.formUrl;\n                    this.createText = `New ${this.service.form.title}`;\n                });\n            }\n            else if (this.service.formUrl) {\n                this.gridSrc = this.service.formUrl;\n                this.createText = `New ${this.service.form.title}`;\n            }\n            this.cdr.detectChanges();\n        });\n    }\n    onSelect(row) {\n        this.ngZone.run(() => {\n            this.router.navigate([row._id, 'view'], { relativeTo: this.route });\n        });\n    }\n    onCreateItem() {\n        this.ngZone.run(() => {\n            this.router.navigate(['new'], { relativeTo: this.route });\n        });\n    }\n}\nFormioResourceIndexComponent.ɵfac = function FormioResourceIndexComponent_Factory(t) { return new (t || FormioResourceIndexComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(FormioResourceConfig), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone)); };\nFormioResourceIndexComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceIndexComponent, selectors: [[\"ng-component\"]], decls: 2, vars: 5, consts: [[3, \"alerts\"], [3, \"src\", \"query\", \"onForm\", \"createText\", \"rowSelect\", \"error\", \"createItem\"]], template: function FormioResourceIndexComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"formio-alerts\", 0);\n        i0.ɵɵelementStart(1, \"formio-grid\", 1);\n        i0.ɵɵlistener(\"rowSelect\", function FormioResourceIndexComponent_Template_formio_grid_rowSelect_1_listener($event) { return ctx.onSelect($event); })(\"error\", function FormioResourceIndexComponent_Template_formio_grid_error_1_listener($event) { return ctx.service.onError($event); })(\"createItem\", function FormioResourceIndexComponent_Template_formio_grid_createItem_1_listener() { return ctx.onCreateItem(); });\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"alerts\", ctx.service.alerts);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"src\", ctx.gridSrc)(\"query\", ctx.gridQuery)(\"onForm\", ctx.service.formLoaded)(\"createText\", ctx.createText);\n    } }, directives: [i1$1.FormioAlertsComponent, i5.FormioGridComponent], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceIndexComponent, [{\n        type: Component,\n        args: [{ template: \"<formio-alerts [alerts]=\\\"service.alerts\\\"></formio-alerts>\\n<formio-grid\\n  [src]=\\\"gridSrc\\\"\\n  [query]=\\\"gridQuery\\\"\\n  [onForm]=\\\"service.formLoaded\\\"\\n  (rowSelect)=\\\"onSelect($event)\\\"\\n  (error)=\\\"service.onError($event)\\\"\\n  (createItem)=\\\"onCreateItem()\\\"\\n  [createText]=\\\"createText\\\"\\n></formio-grid>\\n\" }]\n    }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: FormioResourceConfig }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, null); })();\n\nfunction FormioResourceRoutes(config) {\n    return [\n        {\n            path: '',\n            component: config && config.index ? config.index : FormioResourceIndexComponent\n        },\n        {\n            path: 'new',\n            component: config && config.create ? config.create : FormioResourceCreateComponent\n        },\n        {\n            path: ':id',\n            component: config && config.resource ? config.resource : FormioResourceComponent,\n            children: [\n                {\n                    path: '',\n                    redirectTo: 'view',\n                    pathMatch: 'full'\n                },\n                {\n                    path: 'view',\n                    component: config && config.view ? config.view : FormioResourceViewComponent\n                },\n                {\n                    path: 'edit',\n                    component: config && config.edit ? config.edit : FormioResourceEditComponent\n                },\n                {\n                    path: 'delete',\n                    component: config && config.delete ? config.delete : FormioResourceDeleteComponent\n                }\n            ]\n        }\n    ];\n}\n\nclass FormioResource {\n    static forChild(config) {\n        return extendRouter(FormioResource, config, FormioResourceRoutes);\n    }\n    static forRoot(config) {\n        return extendRouter(FormioResource, config, FormioResourceRoutes);\n    }\n}\nFormioResource.ɵfac = function FormioResource_Factory(t) { return new (t || FormioResource)(); };\nFormioResource.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FormioResource });\nFormioResource.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n        FormioAlerts\n    ], imports: [[\n            CommonModule,\n            FormioModule,\n            FormioGrid,\n            RouterModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResource, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormioModule,\n                    FormioGrid,\n                    RouterModule\n                ],\n                declarations: [\n                    FormioResourceComponent,\n                    FormioResourceCreateComponent,\n                    FormioResourceIndexComponent,\n                    FormioResourceViewComponent,\n                    FormioResourceEditComponent,\n                    FormioResourceDeleteComponent\n                ],\n                providers: [\n                    FormioAlerts\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormioResource, { declarations: [FormioResourceComponent,\n        FormioResourceCreateComponent,\n        FormioResourceIndexComponent,\n        FormioResourceViewComponent,\n        FormioResourceEditComponent,\n        FormioResourceDeleteComponent], imports: [CommonModule,\n        FormioModule,\n        FormioGrid,\n        RouterModule] }); })();\n\n/*\n * Public API Surface of angular-formio\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormioResource, FormioResourceComponent, FormioResourceConfig, FormioResourceCreateComponent, FormioResourceDeleteComponent, FormioResourceEditComponent, FormioResourceIndexComponent, FormioResourceRoutes, FormioResourceService, FormioResourceViewComponent, FormioResources };\n//# sourceMappingURL=formio-angular-resource.mjs.map\n","map":{"version":3,"file":"formio-angular-resource.mjs","sources":["../../../projects/angular-formio/resource/src/resource.config.ts","../../../projects/angular-formio/resource/src/resources.service.ts","../../../projects/angular-formio/resource/src/resource.service.ts","../../../projects/angular-formio/resource/src/resource.component.html","../../../projects/angular-formio/resource/src/resource.component.ts","../../../projects/angular-formio/resource/src/view/view.component.ts","../../../projects/angular-formio/resource/src/view/view.component.html","../../../projects/angular-formio/resource/src/edit/edit.component.ts","../../../projects/angular-formio/resource/src/edit/edit.component.html","../../../projects/angular-formio/resource/src/delete/delete.component.ts","../../../projects/angular-formio/resource/src/delete/delete.component.html","../../../projects/angular-formio/resource/src/create/create.component.html","../../../projects/angular-formio/resource/src/create/create.component.ts","../../../projects/angular-formio/resource/src/index/index.component.ts","../../../projects/angular-formio/resource/src/index/index.component.html","../../../projects/angular-formio/resource/src/resource.routes.ts","../../../projects/angular-formio/resource/src/resource.module.ts","../../../projects/angular-formio/resource/src/public_api.ts","../../../projects/angular-formio/resource/src/formio-angular-resource.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FormioResourceRouteConfig {\n  index?: any;\n  create?: any;\n  resource?: any;\n  view?: any;\n  edit?: any;\n  delete?: any;\n}\n\n@Injectable()\nexport class FormioResourceConfig {\n  name = '';\n  form = '';\n  parents: any[] = [];\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { FormioAuthService } from '@formio/angular/auth';\n\nexport interface FormioResourceMap {\n  [name: string]: any;\n}\n\n@Injectable()\nexport class FormioResources {\n  resources: FormioResourceMap = {};\n  error: EventEmitter<any>;\n  onError: EventEmitter<any>;\n  constructor(\n    public auth?: FormioAuthService\n  ) {\n    this.error = new EventEmitter();\n    this.onError = this.error;\n    this.resources = {\n      currentUser: {\n        resourceLoaded: this.auth.userReady\n      }\n    };\n  }\n}\n","import { ApplicationRef, EventEmitter, Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormioResourceConfig } from './resource.config';\nimport { FormioResources } from './resources.service';\nimport { FormioPromiseService } from '@formio/angular';\nimport { FormioAlerts } from '@formio/angular';\nimport { FormioAppConfig } from '@formio/angular';\nimport { FormioRefreshValue } from '@formio/angular';\nimport Promise from 'native-promise-only';\nimport { Formio, Utils } from 'formiojs';\nimport _ from 'lodash';\n\n@Injectable()\nexport class FormioResourceService {\n  public initialized = false;\n  public form: any;\n  public alerts: FormioAlerts;\n  public resource: any;\n  public resourceUrl?: string;\n  public formUrl: string;\n  public formFormio: FormioPromiseService;\n  public formio: FormioPromiseService;\n  public refresh: EventEmitter<FormioRefreshValue>;\n\n  public resourceLoading?: Promise<any>;\n  public resourceLoaded?: Promise<any>;\n  public resourceId?: string;\n  public resources: any;\n\n  public formLoading?: Promise<any>;\n  public formLoaded: Promise<any>;\n  public formResolve: any;\n  public formReject: any;\n  public isLoading: boolean;\n\n  constructor(\n    public appConfig: FormioAppConfig,\n    public config: FormioResourceConfig,\n    @Optional() public resourcesService: FormioResources,\n    public appRef: ApplicationRef,\n  ) {\n    this.isLoading = true;\n    this.alerts = new FormioAlerts();\n    this.refresh = new EventEmitter();\n    this.formLoaded = new Promise((resolve: any, reject: any) => {\n      this.formResolve = resolve;\n      this.formReject = reject;\n    });\n    this.init();\n  }\n\n  initialize() {\n    console.warn('FormioResourceService.initialize() has been deprecated.');\n  }\n\n  init() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n    if (this.appConfig && this.appConfig.appUrl) {\n      Formio.setBaseUrl(this.appConfig.apiUrl);\n      Formio.setProjectUrl(this.appConfig.appUrl);\n      Formio.formOnly = this.appConfig.formOnly;\n    } else {\n      console.error('You must provide an AppConfig within your application!');\n    }\n\n    // Create the form url and load the resources.\n    this.formUrl = this.appConfig.appUrl + '/' + this.config.form;\n    this.resource = { data: {} };\n\n    // Add this resource service to the list of all resources in context.\n    if (this.resourcesService) {\n      this.resources = this.resourcesService.resources;\n      this.resources[this.config.name] = this;\n    }\n\n    return this.loadForm();\n  }\n\n  onError(error: any) {\n    this.alerts.setAlert({\n      type: 'danger',\n      message: error.message || error\n    });\n    if (this.resourcesService) {\n      this.resourcesService.error.emit(error);\n    }\n    throw error;\n  }\n\n  onFormError(err: any) {\n    this.formReject(err);\n    this.onError(err);\n  }\n\n  setContext(route: ActivatedRoute) {\n    this.resourceId = route.snapshot.params['id'];\n    this.resource = { data: {} };\n    this.resourceUrl = this.appConfig.appUrl + '/' + this.config.form;\n    if (this.resourceId) {\n      this.resourceUrl += '/submission/' + this.resourceId;\n    }\n    this.formio = new FormioPromiseService(this.resourceUrl);\n    if (this.resourcesService) {\n      this.resources[this.config.name] = this;\n    }\n    this.loadParents();\n  }\n\n  loadForm() {\n    this.formFormio = new FormioPromiseService(this.formUrl);\n    this.isLoading = true;\n    this.formLoading = this.formFormio\n      .loadForm()\n      .then(\n        (form: any) => {\n          this.form = form;\n          this.formResolve(form);\n          this.isLoading = false;\n          this.loadParents();\n          return form;\n        },\n        (err: any) => this.onFormError(err)\n      )\n      .catch((err: any) => this.onFormError(err));\n    return this.formLoading;\n  }\n\n  loadParents() {\n    if (!this.config.parents || !this.config.parents.length) {\n      return Promise.resolve([]);\n    }\n    if (!this.resourcesService) {\n      console.warn(\n        'You must provide the FormioResources within your application to use nested resources.'\n      );\n      return Promise.resolve([]);\n    }\n    return this.formLoading.then((form) => {\n      // Iterate through the list of parents.\n      const _parentsLoaded: Array<Promise<any>> = [];\n      this.config.parents.forEach((parent: any) => {\n        const resourceName = parent.resource || parent;\n        const resourceField = parent.field || parent;\n        const filterResource = parent.hasOwnProperty('filter') ? parent.filter : true;\n        if (this.resources.hasOwnProperty(resourceName) && this.resources[resourceName].resourceLoaded) {\n          _parentsLoaded.push(\n            this.resources[resourceName].resourceLoaded.then((resource: any) => {\n              let parentPath = '';\n              Utils.eachComponent(form.components, (component, path) => {\n                if (component.key === resourceField) {\n                  component.hidden = true;\n                  component.clearOnHide = false;\n                  _.set(this.resource.data, path, resource);\n                  parentPath = path;\n                  return true;\n                }\n              });\n              return {\n                name: parentPath,\n                filter: filterResource,\n                resource\n              };\n            })\n          );\n        }\n      });\n\n      // When all the parents have loaded, emit that to the onParents emitter.\n      return Promise.all(_parentsLoaded).then((parents: any) => {\n        this.refresh.emit({\n          form: form,\n          submission: this.resource\n        });\n        return parents;\n      });\n    });\n  }\n\n  onSubmissionError(err: any) {\n    this.onError(err);\n  }\n\n  loadResource(route: ActivatedRoute) {\n    this.setContext(route);\n    this.isLoading = true;\n    this.resourceLoading = this.resourceLoaded = this.formio\n      .loadSubmission(null, {ignoreCache: true})\n      .then(\n        (resource: any) => {\n          this.resource = resource;\n          this.isLoading = false;\n          this.refresh.emit({\n            property: 'submission',\n            value: this.resource\n          });\n          return resource;\n        },\n        (err: any) => this.onSubmissionError(err)\n      )\n      .catch((err: any) => this.onSubmissionError(err));\n    return this.resourceLoading;\n  }\n\n  save(resource: any) {\n    const formio = resource._id ? this.formio : this.formFormio;\n    return formio\n      .saveSubmission(resource)\n      .then(\n        (saved: any) => {\n          this.resource = saved;\n          return saved;\n        },\n        (err: any) => this.onError(err)\n      )\n      .catch((err: any) => this.onError(err));\n  }\n\n  remove() {\n    return this.formio\n      .deleteSubmission()\n      .then(\n        () => {\n          this.resource = null;\n        },\n        (err: any) => this.onError(err)\n      )\n      .catch((err: any) => this.onError(err));\n  }\n}\n","<ul class=\"nav nav-tabs\" style=\"margin-bottom: 10px\">\n  <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"../\"><em class=\"fa fa-chevron-left glyphicon glyphicon-chevron-left\"></em></a></li>\n  <li class=\"nav-item\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"view\" routerLinkActive=\"active\">View</a></li>\n  <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"perms.edit\"><a class=\"nav-link\" routerLink=\"edit\" routerLinkActive=\"active\">Edit</a></li>\n  <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"perms.delete\"><a class=\"nav-link\" routerLink=\"delete\" routerLinkActive=\"active\"><span class=\"fa fa-trash glyphicon glyphicon-trash\"></span></a></li>\n</ul>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { FormioAuthService } from '@formio/angular/auth';\nimport { FormioResourceService } from './resource.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './resource.component.html'\n})\nexport class FormioResourceComponent implements OnInit, OnDestroy {\n  private paramsSubscription: Subscription;\n  public perms = {delete: false, edit: false};\n\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public auth: FormioAuthService,\n  ) {\n    // subscribe to the route param changes, so that we could re-load the submission if navigation happens from one submission to another\n    this.paramsSubscription = this.route.params.subscribe((params) => {\n      this.init();\n    });\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  init() {\n    this.service.loadResource(this.route);\n    this.service.formLoaded.then((form) => {\n      this.auth.ready.then(() => {\n        this.service.resourceLoaded.then((resource) => {\n          this.service.formFormio.userPermissions(this.auth.user, form, resource).then((perms) => {\n            this.perms.delete = perms.delete;\n            this.perms.edit = perms.edit;\n          });\n        });\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.paramsSubscription) {\n      this.paramsSubscription.unsubscribe();\n    }\n  }\n}\n","import {Component, OnDestroy} from '@angular/core';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\nimport {Formio} from 'formiojs';\n\n@Component({\n  templateUrl: './view.component.html'\n})\nexport class FormioResourceViewComponent implements OnDestroy{\n  constructor(\n    public service: FormioResourceService,\n    public config: FormioResourceConfig\n  ) {}\n  public submission = {data: {}};\n\n  ngOnDestroy() {\n    Formio.clearCache();\n  }\n}\n","<formio\n  [form]=\"service.form\"\n  [submission]=\"service.resource\"\n  [hideComponents]=\"config.parents\"\n  [readOnly]=\"true\"\n></formio>\n","import {Component, EventEmitter, OnDestroy} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\nimport { Formio } from 'formiojs';\n\n@Component({\n  templateUrl: './edit.component.html'\n})\nexport class FormioResourceEditComponent implements OnDestroy {\n  public triggerError: EventEmitter<any> = new EventEmitter();\n  public submission = {data: {}};\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router,\n    public config: FormioResourceConfig\n  ) {}\n\n  onSubmit(submission: any) {\n    const edit = this.service.resource;\n    edit.data = submission.data;\n    this.service.save(edit)\n      .then(() => {\n        this.router.navigate(['../', 'view'], { relativeTo: this.route });\n      })\n      .catch((err) => this.triggerError.emit(err));\n  }\n\n  ngOnDestroy() {\n    Formio.clearCache();\n  }\n}\n","<formio\n  [form]=\"service.form\"\n  [submission]=\"service.resource\"\n  [error]=\"triggerError\"\n  (submit)=\"onSubmit($event)\"\n></formio>\n","import { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\n\n@Component({\n  templateUrl: './delete.component.html'\n})\nexport class FormioResourceDeleteComponent {\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router\n  ) {}\n\n  onDelete() {\n    this.service.remove().then(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n  onCancel() {\n    this.router.navigate(['../', 'view'], { relativeTo: this.route });\n  }\n}\n","<h3>Are you sure you wish to delete this record?</h3>\n<div class=\"btn-toolbar\">\n  <button type=\"button\" (click)=\"onDelete()\" class=\"btn btn-danger\" style=\"margin-right: 10px;\">Yes</button>\n  <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-danger\">No</button>\n</div>\n","<h3 *ngIf=\"service.form\" style=\"margin-top:0;\">\n  <a routerLink=\"../\" class=\"back-button\">\n    <em class=\"fa fa-chevron-left glyphicon glyphicon-chevron-left\"></em>\n  </a> | New {{ service.form.title }}\n</h3>\n<formio\n  [form]=\"service.form\"\n  [submission]=\"service.resource\"\n  [refresh]=\"service.refresh\"\n  [error]=\"onError\"\n  [success]=\"onSuccess\"\n  (submit)=\"onSubmit($event)\"\n></formio>\n","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\n\n@Component({\n  styleUrls: ['./create.component.scss'],\n  templateUrl: './create.component.html'\n})\nexport class FormioResourceCreateComponent implements OnInit {\n  public onError: EventEmitter<any>;\n  public onSuccess: EventEmitter<any>;\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router,\n    public config: FormioResourceConfig\n  ) {\n    this.onError = new EventEmitter();\n    this.onSuccess = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.service.setContext(this.route);\n  }\n\n  onSubmit(submission: any) {\n    this.service\n      .save(submission)\n      .then(() => {\n        this.router.navigate(['../', this.service.resource._id, 'view'], {\n          relativeTo: this.route\n        });\n      })\n      .catch((err: any) => this.onError.emit(err));\n  }\n}\n","import { Component, OnInit, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\nimport { each } from 'lodash';\n\n@Component({\n  templateUrl: './index.component.html'\n})\nexport class FormioResourceIndexComponent implements OnInit {\n  public gridSrc?: string;\n  public gridQuery: any;\n  public createText: String;\n\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router,\n    public config: FormioResourceConfig,\n    public cdr: ChangeDetectorRef,\n    public ngZone: NgZone,\n  ) {\n  }\n\n  ngOnInit() {\n    this.gridQuery = {};\n    this.service.setContext(this.route);\n    this.service.formLoaded.then(() => {\n      if (\n        this.service &&\n        this.config.parents &&\n        this.config.parents.length\n      ) {\n        this.service.loadParents().then((parents: any) => {\n          each(parents, (parent: any) => {\n            if (parent && parent.filter) {\n              this.gridQuery['data.' + parent.name + '._id'] =\n                parent.resource._id;\n            }\n          });\n\n          // Set the source to load the grid.\n          this.gridSrc = this.service.formUrl;\n          this.createText = `New ${this.service.form.title}`;\n        });\n      } else if (this.service.formUrl) {\n        this.gridSrc = this.service.formUrl;\n        this.createText = `New ${this.service.form.title}`;\n      }\n\n      this.cdr.detectChanges();\n    });\n  }\n\n  onSelect(row: any) {\n    this.ngZone.run(() => {\n      this.router.navigate([row._id, 'view'], { relativeTo: this.route });\n    });\n  }\n\n  onCreateItem() {\n    this.ngZone.run(() => {\n      this.router.navigate(['new'], { relativeTo: this.route });\n    });\n  }\n}\n","<formio-alerts [alerts]=\"service.alerts\"></formio-alerts>\n<formio-grid\n  [src]=\"gridSrc\"\n  [query]=\"gridQuery\"\n  [onForm]=\"service.formLoaded\"\n  (rowSelect)=\"onSelect($event)\"\n  (error)=\"service.onError($event)\"\n  (createItem)=\"onCreateItem()\"\n  [createText]=\"createText\"\n></formio-grid>\n","import { Routes } from '@angular/router';\nimport { FormioResourceComponent } from './resource.component';\nimport { FormioResourceViewComponent } from './view/view.component';\nimport { FormioResourceEditComponent } from './edit/edit.component';\nimport { FormioResourceDeleteComponent } from './delete/delete.component';\nimport { FormioResourceCreateComponent } from './create/create.component';\nimport { FormioResourceIndexComponent } from './index/index.component';\nimport { FormioResourceRouteConfig } from './resource.config';\nexport function FormioResourceRoutes(config?: FormioResourceRouteConfig): Routes {\n  return [\n    {\n      path: '',\n      component: config && config.index ? config.index : FormioResourceIndexComponent\n    },\n    {\n      path: 'new',\n      component: config && config.create ? config.create : FormioResourceCreateComponent\n    },\n    {\n      path: ':id',\n      component: config && config.resource ? config.resource : FormioResourceComponent,\n      children: [\n        {\n          path: '',\n          redirectTo: 'view',\n          pathMatch: 'full'\n        },\n        {\n          path: 'view',\n          component: config && config.view ? config.view : FormioResourceViewComponent\n        },\n        {\n          path: 'edit',\n          component: config && config.edit ? config.edit : FormioResourceEditComponent\n        },\n        {\n          path: 'delete',\n          component: config && config.delete ? config.delete : FormioResourceDeleteComponent\n        }\n      ]\n    }\n  ];\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormioModule } from '@formio/angular';\nimport { FormioAlerts } from '@formio/angular';\nimport { FormioGrid } from '@formio/angular/grid';\nimport { FormioResourceComponent } from './resource.component';\nimport { FormioResourceViewComponent } from './view/view.component';\nimport { FormioResourceEditComponent } from './edit/edit.component';\nimport { FormioResourceDeleteComponent } from './delete/delete.component';\nimport { FormioResourceCreateComponent } from './create/create.component';\nimport { FormioResourceIndexComponent } from './index/index.component';\nimport { FormioResourceRouteConfig } from './resource.config';\nimport { FormioResourceRoutes } from './resource.routes';\nimport { extendRouter } from '@formio/angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormioModule,\n    FormioGrid,\n    RouterModule\n  ],\n  declarations: [\n    FormioResourceComponent,\n    FormioResourceCreateComponent,\n    FormioResourceIndexComponent,\n    FormioResourceViewComponent,\n    FormioResourceEditComponent,\n    FormioResourceDeleteComponent\n  ],\n  providers: [\n    FormioAlerts\n  ]\n})\nexport class FormioResource {\n  static forChild(config?: FormioResourceRouteConfig): any {\n    return extendRouter(FormioResource, config, FormioResourceRoutes);\n  }\n  static forRoot(config?: FormioResourceRouteConfig): any {\n    return extendRouter(FormioResource, config, FormioResourceRoutes);\n  }\n}\n","/*\n * Public API Surface of angular-formio\n */\n\nexport * from './index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Promise"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Optional, Component, NgModule } from '@angular/core';\nimport * as i1 from '@formio/angular/auth';\nimport * as i1$1 from '@formio/angular';\nimport { FormioAlerts, FormioPromiseService, extendRouter, FormioModule } from '@formio/angular';\nimport Promise$1 from 'native-promise-only';\nimport { Formio, Utils } from 'formiojs';\nimport _, { each } from 'lodash';\nimport * as i2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@formio/angular/grid';\nimport { FormioGrid } from '@formio/angular/grid';\n\nclass FormioResourceConfig {\n    constructor() {\n        this.name = '';\n        this.form = '';\n        this.parents = [];\n    }\n}\nFormioResourceConfig.ɵfac = function FormioResourceConfig_Factory(t) { return new (t || FormioResourceConfig)(); };\nFormioResourceConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioResourceConfig, factory: FormioResourceConfig.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceConfig, [{\n            type: Injectable\n        }], null, null);\n})();\n\nclass FormioResources {\n    constructor(auth) {\n        this.auth = auth;\n        this.resources = {};\n        this.error = new EventEmitter();\n        this.onError = this.error;\n        this.resources = {\n            currentUser: {\n                resourceLoaded: this.auth.userReady\n            }\n        };\n    }\n}\nFormioResources.ɵfac = function FormioResources_Factory(t) { return new (t || FormioResources)(i0.ɵɵinject(i1.FormioAuthService)); };\nFormioResources.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioResources, factory: FormioResources.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResources, [{\n            type: Injectable\n        }], function () { return [{ type: i1.FormioAuthService }]; }, null);\n})();\n\nclass FormioResourceService {\n    constructor(appConfig, config, resourcesService, appRef) {\n        this.appConfig = appConfig;\n        this.config = config;\n        this.resourcesService = resourcesService;\n        this.appRef = appRef;\n        this.initialized = false;\n        this.isLoading = true;\n        this.alerts = new FormioAlerts();\n        this.refresh = new EventEmitter();\n        this.formLoaded = new Promise$1((resolve, reject) => {\n            this.formResolve = resolve;\n            this.formReject = reject;\n        });\n        this.init();\n    }\n    initialize() {\n        console.warn('FormioResourceService.initialize() has been deprecated.');\n    }\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        this.initialized = true;\n        if (this.appConfig && this.appConfig.appUrl) {\n            Formio.setBaseUrl(this.appConfig.apiUrl);\n            Formio.setProjectUrl(this.appConfig.appUrl);\n            Formio.formOnly = this.appConfig.formOnly;\n        }\n        else {\n            console.error('You must provide an AppConfig within your application!');\n        }\n        // Create the form url and load the resources.\n        this.formUrl = this.appConfig.appUrl + '/' + this.config.form;\n        this.resource = { data: {} };\n        // Add this resource service to the list of all resources in context.\n        if (this.resourcesService) {\n            this.resources = this.resourcesService.resources;\n            this.resources[this.config.name] = this;\n        }\n        return this.loadForm();\n    }\n    onError(error) {\n        this.alerts.setAlert({\n            type: 'danger',\n            message: error.message || error\n        });\n        if (this.resourcesService) {\n            this.resourcesService.error.emit(error);\n        }\n        throw error;\n    }\n    onFormError(err) {\n        this.formReject(err);\n        this.onError(err);\n    }\n    setContext(route) {\n        this.resourceId = route.snapshot.params['id'];\n        this.resource = { data: {} };\n        this.resourceUrl = this.appConfig.appUrl + '/' + this.config.form;\n        if (this.resourceId) {\n            this.resourceUrl += '/submission/' + this.resourceId;\n        }\n        this.formio = new FormioPromiseService(this.resourceUrl);\n        if (this.resourcesService) {\n            this.resources[this.config.name] = this;\n        }\n        this.loadParents();\n    }\n    loadForm() {\n        this.formFormio = new FormioPromiseService(this.formUrl);\n        this.isLoading = true;\n        this.formLoading = this.formFormio\n            .loadForm()\n            .then((form) => {\n            this.form = form;\n            this.formResolve(form);\n            this.isLoading = false;\n            this.loadParents();\n            return form;\n        }, (err) => this.onFormError(err))\n            .catch((err) => this.onFormError(err));\n        return this.formLoading;\n    }\n    loadParents() {\n        if (!this.config.parents || !this.config.parents.length) {\n            return Promise$1.resolve([]);\n        }\n        if (!this.resourcesService) {\n            console.warn('You must provide the FormioResources within your application to use nested resources.');\n            return Promise$1.resolve([]);\n        }\n        return this.formLoading.then((form) => {\n            // Iterate through the list of parents.\n            const _parentsLoaded = [];\n            this.config.parents.forEach((parent) => {\n                const resourceName = parent.resource || parent;\n                const resourceField = parent.field || parent;\n                const filterResource = parent.hasOwnProperty('filter') ? parent.filter : true;\n                if (this.resources.hasOwnProperty(resourceName) && this.resources[resourceName].resourceLoaded) {\n                    _parentsLoaded.push(this.resources[resourceName].resourceLoaded.then((resource) => {\n                        let parentPath = '';\n                        Utils.eachComponent(form.components, (component, path) => {\n                            if (component.key === resourceField) {\n                                component.hidden = true;\n                                component.clearOnHide = false;\n                                _.set(this.resource.data, path, resource);\n                                parentPath = path;\n                                return true;\n                            }\n                        });\n                        return {\n                            name: parentPath,\n                            filter: filterResource,\n                            resource\n                        };\n                    }));\n                }\n            });\n            // When all the parents have loaded, emit that to the onParents emitter.\n            return Promise$1.all(_parentsLoaded).then((parents) => {\n                this.refresh.emit({\n                    form: form,\n                    submission: this.resource\n                });\n                return parents;\n            });\n        });\n    }\n    onSubmissionError(err) {\n        this.onError(err);\n    }\n    loadResource(route) {\n        this.setContext(route);\n        this.isLoading = true;\n        this.resourceLoading = this.resourceLoaded = this.formio\n            .loadSubmission(null, { ignoreCache: true })\n            .then((resource) => {\n            this.resource = resource;\n            this.isLoading = false;\n            this.refresh.emit({\n                property: 'submission',\n                value: this.resource\n            });\n            return resource;\n        }, (err) => this.onSubmissionError(err))\n            .catch((err) => this.onSubmissionError(err));\n        return this.resourceLoading;\n    }\n    save(resource) {\n        const formio = resource._id ? this.formio : this.formFormio;\n        return formio\n            .saveSubmission(resource)\n            .then((saved) => {\n            this.resource = saved;\n            return saved;\n        }, (err) => this.onError(err))\n            .catch((err) => this.onError(err));\n    }\n    remove() {\n        return this.formio\n            .deleteSubmission()\n            .then(() => {\n            this.resource = null;\n        }, (err) => this.onError(err))\n            .catch((err) => this.onError(err));\n    }\n}\nFormioResourceService.ɵfac = function FormioResourceService_Factory(t) { return new (t || FormioResourceService)(i0.ɵɵinject(i1$1.FormioAppConfig), i0.ɵɵinject(FormioResourceConfig), i0.ɵɵinject(FormioResources, 8), i0.ɵɵinject(i0.ApplicationRef)); };\nFormioResourceService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormioResourceService, factory: FormioResourceService.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceService, [{\n            type: Injectable\n        }], function () {\n        return [{ type: i1$1.FormioAppConfig }, { type: FormioResourceConfig }, { type: FormioResources, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ApplicationRef }];\n    }, null);\n})();\n\nfunction FormioResourceComponent_li_7_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"li\", 4)(1, \"a\", 7);\n        i0.ɵɵtext(2, \"Edit\");\n        i0.ɵɵelementEnd()();\n    }\n}\nfunction FormioResourceComponent_li_8_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"li\", 4)(1, \"a\", 8);\n        i0.ɵɵelement(2, \"span\", 9);\n        i0.ɵɵelementEnd()();\n    }\n}\nclass FormioResourceComponent {\n    constructor(service, route, auth) {\n        this.service = service;\n        this.route = route;\n        this.auth = auth;\n        this.perms = { delete: false, edit: false };\n        // subscribe to the route param changes, so that we could re-load the submission if navigation happens from one submission to another\n        this.paramsSubscription = this.route.params.subscribe((params) => {\n            this.init();\n        });\n    }\n    ngOnInit() {\n        this.init();\n    }\n    init() {\n        this.service.loadResource(this.route);\n        this.service.formLoaded.then((form) => {\n            this.auth.ready.then(() => {\n                this.service.resourceLoaded.then((resource) => {\n                    this.service.formFormio.userPermissions(this.auth.user, form, resource).then((perms) => {\n                        this.perms.delete = perms.delete;\n                        this.perms.edit = perms.edit;\n                    });\n                });\n            });\n        });\n    }\n    ngOnDestroy() {\n        if (this.paramsSubscription) {\n            this.paramsSubscription.unsubscribe();\n        }\n    }\n}\nFormioResourceComponent.ɵfac = function FormioResourceComponent_Factory(t) { return new (t || FormioResourceComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i1.FormioAuthService)); };\nFormioResourceComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceComponent, selectors: [[\"ng-component\"]], decls: 10, vars: 2, consts: [[1, \"nav\", \"nav-tabs\", 2, \"margin-bottom\", \"10px\"], [1, \"nav-item\"], [\"routerLink\", \"../\", 1, \"nav-link\"], [1, \"fa\", \"fa-chevron-left\", \"glyphicon\", \"glyphicon-chevron-left\"], [\"routerLinkActive\", \"active\", 1, \"nav-item\"], [\"routerLink\", \"view\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"class\", \"nav-item\", \"routerLinkActive\", \"active\", 4, \"ngIf\"], [\"routerLink\", \"edit\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [\"routerLink\", \"delete\", \"routerLinkActive\", \"active\", 1, \"nav-link\"], [1, \"fa\", \"fa-trash\", \"glyphicon\", \"glyphicon-trash\"]], template: function FormioResourceComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"ul\", 0)(1, \"li\", 1)(2, \"a\", 2);\n            i0.ɵɵelement(3, \"em\", 3);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(4, \"li\", 4)(5, \"a\", 5);\n            i0.ɵɵtext(6, \"View\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(7, FormioResourceComponent_li_7_Template, 3, 0, \"li\", 6);\n            i0.ɵɵtemplate(8, FormioResourceComponent_li_8_Template, 3, 0, \"li\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(9, \"router-outlet\");\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngIf\", ctx.perms.edit);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.perms.delete);\n        }\n    }, directives: [i2.RouterLinkWithHref, i2.RouterLinkActive, i4.NgIf, i2.RouterOutlet], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceComponent, [{\n            type: Component,\n            args: [{ template: \"<ul class=\\\"nav nav-tabs\\\" style=\\\"margin-bottom: 10px\\\">\\n  <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"../\\\"><em class=\\\"fa fa-chevron-left glyphicon glyphicon-chevron-left\\\"></em></a></li>\\n  <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"view\\\" routerLinkActive=\\\"active\\\">View</a></li>\\n  <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" *ngIf=\\\"perms.edit\\\"><a class=\\\"nav-link\\\" routerLink=\\\"edit\\\" routerLinkActive=\\\"active\\\">Edit</a></li>\\n  <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" *ngIf=\\\"perms.delete\\\"><a class=\\\"nav-link\\\" routerLink=\\\"delete\\\" routerLinkActive=\\\"active\\\"><span class=\\\"fa fa-trash glyphicon glyphicon-trash\\\"></span></a></li>\\n</ul>\\n<router-outlet></router-outlet>\\n\" }]\n        }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i1.FormioAuthService }]; }, null);\n})();\n\nclass FormioResourceViewComponent {\n    constructor(service, config) {\n        this.service = service;\n        this.config = config;\n        this.submission = { data: {} };\n    }\n    ngOnDestroy() {\n        Formio.clearCache();\n    }\n}\nFormioResourceViewComponent.ɵfac = function FormioResourceViewComponent_Factory(t) { return new (t || FormioResourceViewComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(FormioResourceConfig)); };\nFormioResourceViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceViewComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 4, consts: [[3, \"form\", \"submission\", \"hideComponents\", \"readOnly\"]], template: function FormioResourceViewComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"formio\", 0);\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"form\", ctx.service.form)(\"submission\", ctx.service.resource)(\"hideComponents\", ctx.config.parents)(\"readOnly\", true);\n        }\n    }, directives: [i1$1.FormioComponent], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceViewComponent, [{\n            type: Component,\n            args: [{ template: \"<formio\\n  [form]=\\\"service.form\\\"\\n  [submission]=\\\"service.resource\\\"\\n  [hideComponents]=\\\"config.parents\\\"\\n  [readOnly]=\\\"true\\\"\\n></formio>\\n\" }]\n        }], function () { return [{ type: FormioResourceService }, { type: FormioResourceConfig }]; }, null);\n})();\n\nclass FormioResourceEditComponent {\n    constructor(service, route, router, config) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.triggerError = new EventEmitter();\n        this.submission = { data: {} };\n    }\n    onSubmit(submission) {\n        const edit = this.service.resource;\n        edit.data = submission.data;\n        this.service.save(edit)\n            .then(() => {\n            this.router.navigate(['../', 'view'], { relativeTo: this.route });\n        })\n            .catch((err) => this.triggerError.emit(err));\n    }\n    ngOnDestroy() {\n        Formio.clearCache();\n    }\n}\nFormioResourceEditComponent.ɵfac = function FormioResourceEditComponent_Factory(t) { return new (t || FormioResourceEditComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(FormioResourceConfig)); };\nFormioResourceEditComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceEditComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 3, consts: [[3, \"form\", \"submission\", \"error\", \"submit\"]], template: function FormioResourceEditComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"formio\", 0);\n            i0.ɵɵlistener(\"submit\", function FormioResourceEditComponent_Template_formio_submit_0_listener($event) { return ctx.onSubmit($event); });\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"form\", ctx.service.form)(\"submission\", ctx.service.resource)(\"error\", ctx.triggerError);\n        }\n    }, directives: [i1$1.FormioComponent], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceEditComponent, [{\n            type: Component,\n            args: [{ template: \"<formio\\n  [form]=\\\"service.form\\\"\\n  [submission]=\\\"service.resource\\\"\\n  [error]=\\\"triggerError\\\"\\n  (submit)=\\\"onSubmit($event)\\\"\\n></formio>\\n\" }]\n        }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: FormioResourceConfig }]; }, null);\n})();\n\nclass FormioResourceDeleteComponent {\n    constructor(service, route, router) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n    }\n    onDelete() {\n        this.service.remove().then(() => {\n            this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n    }\n    onCancel() {\n        this.router.navigate(['../', 'view'], { relativeTo: this.route });\n    }\n}\nFormioResourceDeleteComponent.ɵfac = function FormioResourceDeleteComponent_Factory(t) { return new (t || FormioResourceDeleteComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router)); };\nFormioResourceDeleteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceDeleteComponent, selectors: [[\"ng-component\"]], decls: 7, vars: 0, consts: [[1, \"btn-toolbar\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 2, \"margin-right\", \"10px\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]], template: function FormioResourceDeleteComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h3\");\n            i0.ɵɵtext(1, \"Are you sure you wish to delete this record?\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"div\", 0)(3, \"button\", 1);\n            i0.ɵɵlistener(\"click\", function FormioResourceDeleteComponent_Template_button_click_3_listener() { return ctx.onDelete(); });\n            i0.ɵɵtext(4, \"Yes\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"button\", 2);\n            i0.ɵɵlistener(\"click\", function FormioResourceDeleteComponent_Template_button_click_5_listener() { return ctx.onCancel(); });\n            i0.ɵɵtext(6, \"No\");\n            i0.ɵɵelementEnd()();\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceDeleteComponent, [{\n            type: Component,\n            args: [{ template: \"<h3>Are you sure you wish to delete this record?</h3>\\n<div class=\\\"btn-toolbar\\\">\\n  <button type=\\\"button\\\" (click)=\\\"onDelete()\\\" class=\\\"btn btn-danger\\\" style=\\\"margin-right: 10px;\\\">Yes</button>\\n  <button type=\\\"button\\\" (click)=\\\"onCancel()\\\" class=\\\"btn btn-danger\\\">No</button>\\n</div>\\n\" }]\n        }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; }, null);\n})();\n\nfunction FormioResourceCreateComponent_h3_0_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\", 2)(1, \"a\", 3);\n        i0.ɵɵelement(2, \"em\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" | New \", ctx_r0.service.form.title, \"\\n\");\n    }\n}\nclass FormioResourceCreateComponent {\n    constructor(service, route, router, config) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.onError = new EventEmitter();\n        this.onSuccess = new EventEmitter();\n    }\n    ngOnInit() {\n        this.service.setContext(this.route);\n    }\n    onSubmit(submission) {\n        this.service\n            .save(submission)\n            .then(() => {\n            this.router.navigate(['../', this.service.resource._id, 'view'], {\n                relativeTo: this.route\n            });\n        })\n            .catch((err) => this.onError.emit(err));\n    }\n}\nFormioResourceCreateComponent.ɵfac = function FormioResourceCreateComponent_Factory(t) { return new (t || FormioResourceCreateComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(FormioResourceConfig)); };\nFormioResourceCreateComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceCreateComponent, selectors: [[\"ng-component\"]], decls: 2, vars: 6, consts: [[\"style\", \"margin-top:0;\", 4, \"ngIf\"], [3, \"form\", \"submission\", \"refresh\", \"error\", \"success\", \"submit\"], [2, \"margin-top\", \"0\"], [\"routerLink\", \"../\", 1, \"back-button\"], [1, \"fa\", \"fa-chevron-left\", \"glyphicon\", \"glyphicon-chevron-left\"]], template: function FormioResourceCreateComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵtemplate(0, FormioResourceCreateComponent_h3_0_Template, 4, 1, \"h3\", 0);\n            i0.ɵɵelementStart(1, \"formio\", 1);\n            i0.ɵɵlistener(\"submit\", function FormioResourceCreateComponent_Template_formio_submit_1_listener($event) { return ctx.onSubmit($event); });\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.service.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"form\", ctx.service.form)(\"submission\", ctx.service.resource)(\"refresh\", ctx.service.refresh)(\"error\", ctx.onError)(\"success\", ctx.onSuccess);\n        }\n    }, directives: [i4.NgIf, i2.RouterLinkWithHref, i1$1.FormioComponent], styles: [\".back-button[_ngcontent-%COMP%]{font-size:.8em}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceCreateComponent, [{\n            type: Component,\n            args: [{ template: \"<h3 *ngIf=\\\"service.form\\\" style=\\\"margin-top:0;\\\">\\n  <a routerLink=\\\"../\\\" class=\\\"back-button\\\">\\n    <em class=\\\"fa fa-chevron-left glyphicon glyphicon-chevron-left\\\"></em>\\n  </a> | New {{ service.form.title }}\\n</h3>\\n<formio\\n  [form]=\\\"service.form\\\"\\n  [submission]=\\\"service.resource\\\"\\n  [refresh]=\\\"service.refresh\\\"\\n  [error]=\\\"onError\\\"\\n  [success]=\\\"onSuccess\\\"\\n  (submit)=\\\"onSubmit($event)\\\"\\n></formio>\\n\", styles: [\".back-button{font-size:.8em}\\n\"] }]\n        }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: FormioResourceConfig }]; }, null);\n})();\n\nclass FormioResourceIndexComponent {\n    constructor(service, route, router, config, cdr, ngZone) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n    }\n    ngOnInit() {\n        this.gridQuery = {};\n        this.service.setContext(this.route);\n        this.service.formLoaded.then(() => {\n            if (this.service &&\n                this.config.parents &&\n                this.config.parents.length) {\n                this.service.loadParents().then((parents) => {\n                    each(parents, (parent) => {\n                        if (parent && parent.filter) {\n                            this.gridQuery['data.' + parent.name + '._id'] =\n                                parent.resource._id;\n                        }\n                    });\n                    // Set the source to load the grid.\n                    this.gridSrc = this.service.formUrl;\n                    this.createText = `New ${this.service.form.title}`;\n                });\n            }\n            else if (this.service.formUrl) {\n                this.gridSrc = this.service.formUrl;\n                this.createText = `New ${this.service.form.title}`;\n            }\n            this.cdr.detectChanges();\n        });\n    }\n    onSelect(row) {\n        this.ngZone.run(() => {\n            this.router.navigate([row._id, 'view'], { relativeTo: this.route });\n        });\n    }\n    onCreateItem() {\n        this.ngZone.run(() => {\n            this.router.navigate(['new'], { relativeTo: this.route });\n        });\n    }\n}\nFormioResourceIndexComponent.ɵfac = function FormioResourceIndexComponent_Factory(t) { return new (t || FormioResourceIndexComponent)(i0.ɵɵdirectiveInject(FormioResourceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(FormioResourceConfig), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone)); };\nFormioResourceIndexComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormioResourceIndexComponent, selectors: [[\"ng-component\"]], decls: 2, vars: 5, consts: [[3, \"alerts\"], [3, \"src\", \"query\", \"onForm\", \"createText\", \"rowSelect\", \"error\", \"createItem\"]], template: function FormioResourceIndexComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"formio-alerts\", 0);\n            i0.ɵɵelementStart(1, \"formio-grid\", 1);\n            i0.ɵɵlistener(\"rowSelect\", function FormioResourceIndexComponent_Template_formio_grid_rowSelect_1_listener($event) { return ctx.onSelect($event); })(\"error\", function FormioResourceIndexComponent_Template_formio_grid_error_1_listener($event) { return ctx.service.onError($event); })(\"createItem\", function FormioResourceIndexComponent_Template_formio_grid_createItem_1_listener() { return ctx.onCreateItem(); });\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"alerts\", ctx.service.alerts);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"src\", ctx.gridSrc)(\"query\", ctx.gridQuery)(\"onForm\", ctx.service.formLoaded)(\"createText\", ctx.createText);\n        }\n    }, directives: [i1$1.FormioAlertsComponent, i5.FormioGridComponent], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResourceIndexComponent, [{\n            type: Component,\n            args: [{ template: \"<formio-alerts [alerts]=\\\"service.alerts\\\"></formio-alerts>\\n<formio-grid\\n  [src]=\\\"gridSrc\\\"\\n  [query]=\\\"gridQuery\\\"\\n  [onForm]=\\\"service.formLoaded\\\"\\n  (rowSelect)=\\\"onSelect($event)\\\"\\n  (error)=\\\"service.onError($event)\\\"\\n  (createItem)=\\\"onCreateItem()\\\"\\n  [createText]=\\\"createText\\\"\\n></formio-grid>\\n\" }]\n        }], function () { return [{ type: FormioResourceService }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: FormioResourceConfig }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, null);\n})();\n\nfunction FormioResourceRoutes(config) {\n    return [\n        {\n            path: '',\n            component: config && config.index ? config.index : FormioResourceIndexComponent\n        },\n        {\n            path: 'new',\n            component: config && config.create ? config.create : FormioResourceCreateComponent\n        },\n        {\n            path: ':id',\n            component: config && config.resource ? config.resource : FormioResourceComponent,\n            children: [\n                {\n                    path: '',\n                    redirectTo: 'view',\n                    pathMatch: 'full'\n                },\n                {\n                    path: 'view',\n                    component: config && config.view ? config.view : FormioResourceViewComponent\n                },\n                {\n                    path: 'edit',\n                    component: config && config.edit ? config.edit : FormioResourceEditComponent\n                },\n                {\n                    path: 'delete',\n                    component: config && config.delete ? config.delete : FormioResourceDeleteComponent\n                }\n            ]\n        }\n    ];\n}\n\nclass FormioResource {\n    static forChild(config) {\n        return extendRouter(FormioResource, config, FormioResourceRoutes);\n    }\n    static forRoot(config) {\n        return extendRouter(FormioResource, config, FormioResourceRoutes);\n    }\n}\nFormioResource.ɵfac = function FormioResource_Factory(t) { return new (t || FormioResource)(); };\nFormioResource.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FormioResource });\nFormioResource.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n        FormioAlerts\n    ], imports: [[\n            CommonModule,\n            FormioModule,\n            FormioGrid,\n            RouterModule\n        ]] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormioResource, [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormioModule,\n                        FormioGrid,\n                        RouterModule\n                    ],\n                    declarations: [\n                        FormioResourceComponent,\n                        FormioResourceCreateComponent,\n                        FormioResourceIndexComponent,\n                        FormioResourceViewComponent,\n                        FormioResourceEditComponent,\n                        FormioResourceDeleteComponent\n                    ],\n                    providers: [\n                        FormioAlerts\n                    ]\n                }]\n        }], null, null);\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormioResource, { declarations: [FormioResourceComponent,\n            FormioResourceCreateComponent,\n            FormioResourceIndexComponent,\n            FormioResourceViewComponent,\n            FormioResourceEditComponent,\n            FormioResourceDeleteComponent], imports: [CommonModule,\n            FormioModule,\n            FormioGrid,\n            RouterModule] });\n})();\n\n/*\n * Public API Surface of angular-formio\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormioResource, FormioResourceComponent, FormioResourceConfig, FormioResourceCreateComponent, FormioResourceDeleteComponent, FormioResourceEditComponent, FormioResourceIndexComponent, FormioResourceRoutes, FormioResourceService, FormioResourceViewComponent, FormioResources };\n//# sourceMappingURL=formio-angular-resource.mjs.map\n","map":{"version":3,"file":"formio-angular-resource.mjs","sources":["../../../projects/angular-formio/resource/src/resource.config.ts","../../../projects/angular-formio/resource/src/resources.service.ts","../../../projects/angular-formio/resource/src/resource.service.ts","../../../projects/angular-formio/resource/src/resource.component.html","../../../projects/angular-formio/resource/src/resource.component.ts","../../../projects/angular-formio/resource/src/view/view.component.ts","../../../projects/angular-formio/resource/src/view/view.component.html","../../../projects/angular-formio/resource/src/edit/edit.component.ts","../../../projects/angular-formio/resource/src/edit/edit.component.html","../../../projects/angular-formio/resource/src/delete/delete.component.ts","../../../projects/angular-formio/resource/src/delete/delete.component.html","../../../projects/angular-formio/resource/src/create/create.component.html","../../../projects/angular-formio/resource/src/create/create.component.ts","../../../projects/angular-formio/resource/src/index/index.component.ts","../../../projects/angular-formio/resource/src/index/index.component.html","../../../projects/angular-formio/resource/src/resource.routes.ts","../../../projects/angular-formio/resource/src/resource.module.ts","../../../projects/angular-formio/resource/src/public_api.ts","../../../projects/angular-formio/resource/src/formio-angular-resource.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FormioResourceRouteConfig {\n  index?: any;\n  create?: any;\n  resource?: any;\n  view?: any;\n  edit?: any;\n  delete?: any;\n}\n\n@Injectable()\nexport class FormioResourceConfig {\n  name = '';\n  form = '';\n  parents: any[] = [];\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { FormioAuthService } from '@formio/angular/auth';\n\nexport interface FormioResourceMap {\n  [name: string]: any;\n}\n\n@Injectable()\nexport class FormioResources {\n  resources: FormioResourceMap = {};\n  error: EventEmitter<any>;\n  onError: EventEmitter<any>;\n  constructor(\n    public auth?: FormioAuthService\n  ) {\n    this.error = new EventEmitter();\n    this.onError = this.error;\n    this.resources = {\n      currentUser: {\n        resourceLoaded: this.auth.userReady\n      }\n    };\n  }\n}\n","import { ApplicationRef, EventEmitter, Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormioResourceConfig } from './resource.config';\nimport { FormioResources } from './resources.service';\nimport { FormioPromiseService } from '@formio/angular';\nimport { FormioAlerts } from '@formio/angular';\nimport { FormioAppConfig } from '@formio/angular';\nimport { FormioRefreshValue } from '@formio/angular';\nimport Promise from 'native-promise-only';\nimport { Formio, Utils } from 'formiojs';\nimport _ from 'lodash';\n\n@Injectable()\nexport class FormioResourceService {\n  public initialized = false;\n  public form: any;\n  public alerts: FormioAlerts;\n  public resource: any;\n  public resourceUrl?: string;\n  public formUrl: string;\n  public formFormio: FormioPromiseService;\n  public formio: FormioPromiseService;\n  public refresh: EventEmitter<FormioRefreshValue>;\n\n  public resourceLoading?: Promise<any>;\n  public resourceLoaded?: Promise<any>;\n  public resourceId?: string;\n  public resources: any;\n\n  public formLoading?: Promise<any>;\n  public formLoaded: Promise<any>;\n  public formResolve: any;\n  public formReject: any;\n  public isLoading: boolean;\n\n  constructor(\n    public appConfig: FormioAppConfig,\n    public config: FormioResourceConfig,\n    @Optional() public resourcesService: FormioResources,\n    public appRef: ApplicationRef,\n  ) {\n    this.isLoading = true;\n    this.alerts = new FormioAlerts();\n    this.refresh = new EventEmitter();\n    this.formLoaded = new Promise((resolve: any, reject: any) => {\n      this.formResolve = resolve;\n      this.formReject = reject;\n    });\n    this.init();\n  }\n\n  initialize() {\n    console.warn('FormioResourceService.initialize() has been deprecated.');\n  }\n\n  init() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n    if (this.appConfig && this.appConfig.appUrl) {\n      Formio.setBaseUrl(this.appConfig.apiUrl);\n      Formio.setProjectUrl(this.appConfig.appUrl);\n      Formio.formOnly = this.appConfig.formOnly;\n    } else {\n      console.error('You must provide an AppConfig within your application!');\n    }\n\n    // Create the form url and load the resources.\n    this.formUrl = this.appConfig.appUrl + '/' + this.config.form;\n    this.resource = { data: {} };\n\n    // Add this resource service to the list of all resources in context.\n    if (this.resourcesService) {\n      this.resources = this.resourcesService.resources;\n      this.resources[this.config.name] = this;\n    }\n\n    return this.loadForm();\n  }\n\n  onError(error: any) {\n    this.alerts.setAlert({\n      type: 'danger',\n      message: error.message || error\n    });\n    if (this.resourcesService) {\n      this.resourcesService.error.emit(error);\n    }\n    throw error;\n  }\n\n  onFormError(err: any) {\n    this.formReject(err);\n    this.onError(err);\n  }\n\n  setContext(route: ActivatedRoute) {\n    this.resourceId = route.snapshot.params['id'];\n    this.resource = { data: {} };\n    this.resourceUrl = this.appConfig.appUrl + '/' + this.config.form;\n    if (this.resourceId) {\n      this.resourceUrl += '/submission/' + this.resourceId;\n    }\n    this.formio = new FormioPromiseService(this.resourceUrl);\n    if (this.resourcesService) {\n      this.resources[this.config.name] = this;\n    }\n    this.loadParents();\n  }\n\n  loadForm() {\n    this.formFormio = new FormioPromiseService(this.formUrl);\n    this.isLoading = true;\n    this.formLoading = this.formFormio\n      .loadForm()\n      .then(\n        (form: any) => {\n          this.form = form;\n          this.formResolve(form);\n          this.isLoading = false;\n          this.loadParents();\n          return form;\n        },\n        (err: any) => this.onFormError(err)\n      )\n      .catch((err: any) => this.onFormError(err));\n    return this.formLoading;\n  }\n\n  loadParents() {\n    if (!this.config.parents || !this.config.parents.length) {\n      return Promise.resolve([]);\n    }\n    if (!this.resourcesService) {\n      console.warn(\n        'You must provide the FormioResources within your application to use nested resources.'\n      );\n      return Promise.resolve([]);\n    }\n    return this.formLoading.then((form) => {\n      // Iterate through the list of parents.\n      const _parentsLoaded: Array<Promise<any>> = [];\n      this.config.parents.forEach((parent: any) => {\n        const resourceName = parent.resource || parent;\n        const resourceField = parent.field || parent;\n        const filterResource = parent.hasOwnProperty('filter') ? parent.filter : true;\n        if (this.resources.hasOwnProperty(resourceName) && this.resources[resourceName].resourceLoaded) {\n          _parentsLoaded.push(\n            this.resources[resourceName].resourceLoaded.then((resource: any) => {\n              let parentPath = '';\n              Utils.eachComponent(form.components, (component, path) => {\n                if (component.key === resourceField) {\n                  component.hidden = true;\n                  component.clearOnHide = false;\n                  _.set(this.resource.data, path, resource);\n                  parentPath = path;\n                  return true;\n                }\n              });\n              return {\n                name: parentPath,\n                filter: filterResource,\n                resource\n              };\n            })\n          );\n        }\n      });\n\n      // When all the parents have loaded, emit that to the onParents emitter.\n      return Promise.all(_parentsLoaded).then((parents: any) => {\n        this.refresh.emit({\n          form: form,\n          submission: this.resource\n        });\n        return parents;\n      });\n    });\n  }\n\n  onSubmissionError(err: any) {\n    this.onError(err);\n  }\n\n  loadResource(route: ActivatedRoute) {\n    this.setContext(route);\n    this.isLoading = true;\n    this.resourceLoading = this.resourceLoaded = this.formio\n      .loadSubmission(null, {ignoreCache: true})\n      .then(\n        (resource: any) => {\n          this.resource = resource;\n          this.isLoading = false;\n          this.refresh.emit({\n            property: 'submission',\n            value: this.resource\n          });\n          return resource;\n        },\n        (err: any) => this.onSubmissionError(err)\n      )\n      .catch((err: any) => this.onSubmissionError(err));\n    return this.resourceLoading;\n  }\n\n  save(resource: any) {\n    const formio = resource._id ? this.formio : this.formFormio;\n    return formio\n      .saveSubmission(resource)\n      .then(\n        (saved: any) => {\n          this.resource = saved;\n          return saved;\n        },\n        (err: any) => this.onError(err)\n      )\n      .catch((err: any) => this.onError(err));\n  }\n\n  remove() {\n    return this.formio\n      .deleteSubmission()\n      .then(\n        () => {\n          this.resource = null;\n        },\n        (err: any) => this.onError(err)\n      )\n      .catch((err: any) => this.onError(err));\n  }\n}\n","<ul class=\"nav nav-tabs\" style=\"margin-bottom: 10px\">\n  <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"../\"><em class=\"fa fa-chevron-left glyphicon glyphicon-chevron-left\"></em></a></li>\n  <li class=\"nav-item\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"view\" routerLinkActive=\"active\">View</a></li>\n  <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"perms.edit\"><a class=\"nav-link\" routerLink=\"edit\" routerLinkActive=\"active\">Edit</a></li>\n  <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"perms.delete\"><a class=\"nav-link\" routerLink=\"delete\" routerLinkActive=\"active\"><span class=\"fa fa-trash glyphicon glyphicon-trash\"></span></a></li>\n</ul>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { FormioAuthService } from '@formio/angular/auth';\nimport { FormioResourceService } from './resource.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './resource.component.html'\n})\nexport class FormioResourceComponent implements OnInit, OnDestroy {\n  private paramsSubscription: Subscription;\n  public perms = {delete: false, edit: false};\n\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public auth: FormioAuthService,\n  ) {\n    // subscribe to the route param changes, so that we could re-load the submission if navigation happens from one submission to another\n    this.paramsSubscription = this.route.params.subscribe((params) => {\n      this.init();\n    });\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  init() {\n    this.service.loadResource(this.route);\n    this.service.formLoaded.then((form) => {\n      this.auth.ready.then(() => {\n        this.service.resourceLoaded.then((resource) => {\n          this.service.formFormio.userPermissions(this.auth.user, form, resource).then((perms) => {\n            this.perms.delete = perms.delete;\n            this.perms.edit = perms.edit;\n          });\n        });\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.paramsSubscription) {\n      this.paramsSubscription.unsubscribe();\n    }\n  }\n}\n","import {Component, OnDestroy} from '@angular/core';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\nimport {Formio} from 'formiojs';\n\n@Component({\n  templateUrl: './view.component.html'\n})\nexport class FormioResourceViewComponent implements OnDestroy{\n  constructor(\n    public service: FormioResourceService,\n    public config: FormioResourceConfig\n  ) {}\n  public submission = {data: {}};\n\n  ngOnDestroy() {\n    Formio.clearCache();\n  }\n}\n","<formio\n  [form]=\"service.form\"\n  [submission]=\"service.resource\"\n  [hideComponents]=\"config.parents\"\n  [readOnly]=\"true\"\n></formio>\n","import {Component, EventEmitter, OnDestroy} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\nimport { Formio } from 'formiojs';\n\n@Component({\n  templateUrl: './edit.component.html'\n})\nexport class FormioResourceEditComponent implements OnDestroy {\n  public triggerError: EventEmitter<any> = new EventEmitter();\n  public submission = {data: {}};\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router,\n    public config: FormioResourceConfig\n  ) {}\n\n  onSubmit(submission: any) {\n    const edit = this.service.resource;\n    edit.data = submission.data;\n    this.service.save(edit)\n      .then(() => {\n        this.router.navigate(['../', 'view'], { relativeTo: this.route });\n      })\n      .catch((err) => this.triggerError.emit(err));\n  }\n\n  ngOnDestroy() {\n    Formio.clearCache();\n  }\n}\n","<formio\n  [form]=\"service.form\"\n  [submission]=\"service.resource\"\n  [error]=\"triggerError\"\n  (submit)=\"onSubmit($event)\"\n></formio>\n","import { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\n\n@Component({\n  templateUrl: './delete.component.html'\n})\nexport class FormioResourceDeleteComponent {\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router\n  ) {}\n\n  onDelete() {\n    this.service.remove().then(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n  onCancel() {\n    this.router.navigate(['../', 'view'], { relativeTo: this.route });\n  }\n}\n","<h3>Are you sure you wish to delete this record?</h3>\n<div class=\"btn-toolbar\">\n  <button type=\"button\" (click)=\"onDelete()\" class=\"btn btn-danger\" style=\"margin-right: 10px;\">Yes</button>\n  <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-danger\">No</button>\n</div>\n","<h3 *ngIf=\"service.form\" style=\"margin-top:0;\">\n  <a routerLink=\"../\" class=\"back-button\">\n    <em class=\"fa fa-chevron-left glyphicon glyphicon-chevron-left\"></em>\n  </a> | New {{ service.form.title }}\n</h3>\n<formio\n  [form]=\"service.form\"\n  [submission]=\"service.resource\"\n  [refresh]=\"service.refresh\"\n  [error]=\"onError\"\n  [success]=\"onSuccess\"\n  (submit)=\"onSubmit($event)\"\n></formio>\n","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\n\n@Component({\n  styleUrls: ['./create.component.scss'],\n  templateUrl: './create.component.html'\n})\nexport class FormioResourceCreateComponent implements OnInit {\n  public onError: EventEmitter<any>;\n  public onSuccess: EventEmitter<any>;\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router,\n    public config: FormioResourceConfig\n  ) {\n    this.onError = new EventEmitter();\n    this.onSuccess = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.service.setContext(this.route);\n  }\n\n  onSubmit(submission: any) {\n    this.service\n      .save(submission)\n      .then(() => {\n        this.router.navigate(['../', this.service.resource._id, 'view'], {\n          relativeTo: this.route\n        });\n      })\n      .catch((err: any) => this.onError.emit(err));\n  }\n}\n","import { Component, OnInit, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from '../resource.service';\nimport { FormioResourceConfig } from '../resource.config';\nimport { each } from 'lodash';\n\n@Component({\n  templateUrl: './index.component.html'\n})\nexport class FormioResourceIndexComponent implements OnInit {\n  public gridSrc?: string;\n  public gridQuery: any;\n  public createText: String;\n\n  constructor(\n    public service: FormioResourceService,\n    public route: ActivatedRoute,\n    public router: Router,\n    public config: FormioResourceConfig,\n    public cdr: ChangeDetectorRef,\n    public ngZone: NgZone,\n  ) {\n  }\n\n  ngOnInit() {\n    this.gridQuery = {};\n    this.service.setContext(this.route);\n    this.service.formLoaded.then(() => {\n      if (\n        this.service &&\n        this.config.parents &&\n        this.config.parents.length\n      ) {\n        this.service.loadParents().then((parents: any) => {\n          each(parents, (parent: any) => {\n            if (parent && parent.filter) {\n              this.gridQuery['data.' + parent.name + '._id'] =\n                parent.resource._id;\n            }\n          });\n\n          // Set the source to load the grid.\n          this.gridSrc = this.service.formUrl;\n          this.createText = `New ${this.service.form.title}`;\n        });\n      } else if (this.service.formUrl) {\n        this.gridSrc = this.service.formUrl;\n        this.createText = `New ${this.service.form.title}`;\n      }\n\n      this.cdr.detectChanges();\n    });\n  }\n\n  onSelect(row: any) {\n    this.ngZone.run(() => {\n      this.router.navigate([row._id, 'view'], { relativeTo: this.route });\n    });\n  }\n\n  onCreateItem() {\n    this.ngZone.run(() => {\n      this.router.navigate(['new'], { relativeTo: this.route });\n    });\n  }\n}\n","<formio-alerts [alerts]=\"service.alerts\"></formio-alerts>\n<formio-grid\n  [src]=\"gridSrc\"\n  [query]=\"gridQuery\"\n  [onForm]=\"service.formLoaded\"\n  (rowSelect)=\"onSelect($event)\"\n  (error)=\"service.onError($event)\"\n  (createItem)=\"onCreateItem()\"\n  [createText]=\"createText\"\n></formio-grid>\n","import { Routes } from '@angular/router';\nimport { FormioResourceComponent } from './resource.component';\nimport { FormioResourceViewComponent } from './view/view.component';\nimport { FormioResourceEditComponent } from './edit/edit.component';\nimport { FormioResourceDeleteComponent } from './delete/delete.component';\nimport { FormioResourceCreateComponent } from './create/create.component';\nimport { FormioResourceIndexComponent } from './index/index.component';\nimport { FormioResourceRouteConfig } from './resource.config';\nexport function FormioResourceRoutes(config?: FormioResourceRouteConfig): Routes {\n  return [\n    {\n      path: '',\n      component: config && config.index ? config.index : FormioResourceIndexComponent\n    },\n    {\n      path: 'new',\n      component: config && config.create ? config.create : FormioResourceCreateComponent\n    },\n    {\n      path: ':id',\n      component: config && config.resource ? config.resource : FormioResourceComponent,\n      children: [\n        {\n          path: '',\n          redirectTo: 'view',\n          pathMatch: 'full'\n        },\n        {\n          path: 'view',\n          component: config && config.view ? config.view : FormioResourceViewComponent\n        },\n        {\n          path: 'edit',\n          component: config && config.edit ? config.edit : FormioResourceEditComponent\n        },\n        {\n          path: 'delete',\n          component: config && config.delete ? config.delete : FormioResourceDeleteComponent\n        }\n      ]\n    }\n  ];\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormioModule } from '@formio/angular';\nimport { FormioAlerts } from '@formio/angular';\nimport { FormioGrid } from '@formio/angular/grid';\nimport { FormioResourceComponent } from './resource.component';\nimport { FormioResourceViewComponent } from './view/view.component';\nimport { FormioResourceEditComponent } from './edit/edit.component';\nimport { FormioResourceDeleteComponent } from './delete/delete.component';\nimport { FormioResourceCreateComponent } from './create/create.component';\nimport { FormioResourceIndexComponent } from './index/index.component';\nimport { FormioResourceRouteConfig } from './resource.config';\nimport { FormioResourceRoutes } from './resource.routes';\nimport { extendRouter } from '@formio/angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormioModule,\n    FormioGrid,\n    RouterModule\n  ],\n  declarations: [\n    FormioResourceComponent,\n    FormioResourceCreateComponent,\n    FormioResourceIndexComponent,\n    FormioResourceViewComponent,\n    FormioResourceEditComponent,\n    FormioResourceDeleteComponent\n  ],\n  providers: [\n    FormioAlerts\n  ]\n})\nexport class FormioResource {\n  static forChild(config?: FormioResourceRouteConfig): any {\n    return extendRouter(FormioResource, config, FormioResourceRoutes);\n  }\n  static forRoot(config?: FormioResourceRouteConfig): any {\n    return extendRouter(FormioResource, config, FormioResourceRoutes);\n  }\n}\n","/*\n * Public API Surface of angular-formio\n */\n\nexport * from './index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Promise"],"mappings":"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"}}}