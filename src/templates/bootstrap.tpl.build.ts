// THIS IS A GENERATED FILE. DO NOT MODIFY!!!
/* eslint-disable */
/* tslint-disable */
import { FormioTemplate } from '../formio.template';
import { DatepickerModule, TimepickerModule } from 'ng2-bootstrap/ng2-bootstrap';
import { SelectModule } from 'ng2-select/ng2-select';

let getTemplate = function(template: string) {
    return {component: {template: template}};
};
export const FORMIO_BOOTSTRAP: FormioTemplate = {
    formio: {
        component: {
            template: "<formio-wizard *ngIf=\"form.display === \'wizard\'\" [src]=\"src\" [form]=\"form\" [submission]=\"submission\"></formio-wizard>\n<form *ngIf=\"!form.display || (form.display === \'form\')\" (submit)=\"onSubmit($event)\" [formGroup]=\"formGroup\">\n    <formio-errors [errors]=\"events.errors\" [options]=\"options.errors\"></formio-errors>\n    <i style=\"font-size: 2em;\" *ngIf=\"!(ready | async)\" class=\"formio-loading glyphicon glyphicon-refresh glyphicon-spin\"></i>\n    <formio-components *ngIf=\"ready | async\" [components]=\"form.components\" [form]=\"formGroup\" [submission]=\"formGroup\" [data]=\"submission.data\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n</form>\n",
            styles: [
                '.form-group.required .control-label:after { content:"*"; color:red; }',
                '.glyphicon-spin { -webkit-animation: spin-anim 1s infinite; animation: spin-anim 1s infinite; }',
                '@-webkit-keyframes spin-anim {0% { -webkit-transform: rotate(0deg);transform: rotate(0deg);}100% { -webkit-transform: rotate(359deg);transform: rotate(359deg);}}',
                '@keyframes spin-anim {0% { -webkit-transform: rotate(0deg);transform: rotate(0deg);}100% { -webkit-transform: rotate(359deg);transform: rotate(359deg);}}'
            ]
        }
    },
    formio_wizard: getTemplate("<formio-components [components]=\"form.components\" [form]=\"formGroup\" [submission]=\"formGroup\" [data]=\"submission.data\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n"),
    formio_component: getTemplate("<div class=\"form-group\" [ngClass]=\"{\'has-error\': (errors.length > 0)}\" *ngIf=\"show\">\n    <div *ngFor=\"let comp of components; let i = index;\" style=\"position:relative;\">\n        <button *ngIf=\"component.multiple && (i > 0)\" class=\"btn btn-danger\" style=\"position:absolute;right:0;\" (click)=\"removeAt(i)\"><span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span></button>\n        <formio-element [form]=\"form\" [component]=\"comp\" [submission]=\"submission\" [data]=\"data\" [label]=\"label\" [events]=\"events\" [render]=\"render\"></formio-element>\n        <button *ngIf=\"comp.allowMultiple() && (i === (components.length - 1))\" type=\"button\" class=\"btn btn-default\" (click)=\"addComponent()\"><span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span></button>\n    </div>\n    <div *ngIf=\"(components.length > 0)\">\n        <p *ngFor=\"let error of errors\" class=\"text-danger\">{{ error }}</p>\n    </div>\n</div>\n"),
    formio_components: getTemplate("<formio-component *ngFor=\"let component of components\" [component]=\"component\" [form]=\"form\" [submission]=\"submission\" [data]=\"data\" [events]=\"events\" (render)=\"onRender()\" class=\"form-row\" (change)=\"$event.stopPropagation()\"></formio-component>\n"),
    errors: getTemplate("<div class=\"alert alert-danger\" *ngIf=\"errors.length\">\n  <strong>{{ options.message }}</strong>\n  <ul>\n    <li *ngFor=\"let error of errors\">{{ error.message }}</li>\n  </ul>\n</div>"),
    components: {
        button: getTemplate("<button type=\"submit\" [disabled]=\"component.settings.disableOnInvalid && !form.valid\" class=\"btn btn-{{ component.settings.theme }}\">{{ component.settings.label }}</button>"),
        columns: getTemplate("<div class=\"row\">\n    <div *ngFor=\"let column of component.settings.columns\" class=\"col col-sm-6\">\n        <formio-components [components]=\"column.components\" [form]=\"form\" [submission]=\"submission\" [data]=\"data\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n    </div>\n</div>\n"),
        container: getTemplate("<formio-components [components]=\"component.settings.components\" [form]=\"component.control\" [submission]=\"submission\" [data]=\"component.getData()\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n"),
        datagrid: getTemplate("<div class=\"formio-data-grid\">\n    <table [ngClass]=\"{\n        \'table-striped\': component.settings.striped,\n        \'table-bordered\': component.settings.bordered,\n        \'table-hover\': component.settings.hover,\n        \'table-condensed\': component.settings.condensed\n    }\" class=\"table datagrid-table\">\n        <thead>\n            <tr>\n                <th *ngFor=\"let component of component.settings.components\">{{ component.label }}</th>\n                <th style=\"width: 1em;\"></th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let control of component.control.controls; let i = index;\">\n                <td *ngFor=\"let _component of component.settings.components\"><formio-component [component]=\"_component\" [form]=\"control\" [submission]=\"submission\" [data]=\"component.getData(i)\" [label]=\"false\" [events]=\"events\" (render)=\"onRender()\"></formio-component></td>\n                <td style=\"width: 1em;\"><button type=\"button\" class=\"btn btn-default\" (click)=\"component.removeAt(i)\"><span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span></button></td>\n            </tr>\n        </tbody>\n        <tfoot>\n            <tr><td [attr.colspan]=\"component.settings.components.length + 1\"><button type=\"button\" class=\"btn btn-default\" (click)=\"component.addAnother()\"><span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span></button></td></tr>\n        </tfoot>\n    </table>\n</div>\n"),
        input: getTemplate("<div [formGroup]=\"form\" class=\"form-group\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">{{ component.label }}</label>\n    <div [ngClass]=\"{\'input-group\': (component.settings.prefix || component.settings.suffix)}\">\n        <div *ngIf=\"component.settings.prefix\" class=\"input-group-addon\">{{ component.settings.prefix }}</div>\n        <input [formControl]=\"component.control\" [id]=\"component.settings.key\" [type]=\"component.settings.inputType\" [placeholder]=\"component.settings.placeholder\" class=\"form-control\" />\n        <div *ngIf=\"component.settings.suffix\" class=\"input-group-addon\">{{ component.settings.suffix }}</div>\n    </div>\n</div>\n"),
        textarea: getTemplate("<div [formGroup]=\"form\" class=\"form-group\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">{{ component.label }}</label>\n    <div [ngClass]=\"{\'input-group\': (component.settings.prefix || component.settings.suffix)}\">\n        <div *ngIf=\"component.settings.prefix\" class=\"input-group-addon\">{{ component.settings.prefix }}</div>\n        <textarea [formControl]=\"component.control\" [id]=\"component.settings.key\" [placeholder]=\"component.settings.placeholder\" [rows]=\"component.settings.rows\" class=\"form-control\"></textarea>\n        <div *ngIf=\"component.settings.suffix\" class=\"input-group-addon\">{{ component.settings.suffix }}</div>\n    </div>\n</div>\n"),
        hidden: getTemplate("<div [formGroup]=\"form\" class=\"form-group\">\n    <input [formControl]=\"component.control\" [id]=\"component.settings.key\" type=\"hidden\" [name]=\"component.settings.name\" class=\"form-control\" />\n</div>\n"),
        radio: getTemplate("<div [formGroup]=\"form\" class=\"form-group radio\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">{{ component.label }}</label>\n    <div class=\"input-group\">\n        <div *ngFor=\"let option of component.settings.values\" [class.radio-inline]=\"component.settings.inline\">\n            <label [attr.for]=\"component.settings.key\">\n                <input type=\"radio\" [formControl]=\"component.control\" class=\"radio\" name=\"{{component.settings.key}}\" value=\"{{option.value}}\" />\n                {{ option.label }}\n            </label>\n        </div>\n    </div>\n</div>\n"),
        checkbox: getTemplate("<div [formGroup]=\"form\" class=\"checkbox\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">\n        <input type=\"checkbox\" [formControl]=\"component.control\" [id]=\"component.settings.key\" [name]=\"component.settings.key\" />\n        {{ component.label }}\n    </label>\n</div>\n"),
        custom: getTemplate("<div class=\"well text-muted\" style=\"text-align:center;\">Custom Component</div>\n"),
        table: getTemplate("<div class=\"table-responsive\">\n    <table [ngClass]=\"{\n        \'table-striped\': component.settings.striped,\n        \'table-bordered\': component.settings.bordered,\n        \'table-hover\': component.settings.hover,\n        \'table-condensed\': component.settings.condensed\n    }\" class=\"table\">\n        <tbody *ngFor=\"let control of component.control.controls;\">\n        <tr *ngFor=\"let row of component.settings.rows\">\n            <td *ngFor=\"let data of row\">\n                <div *ngFor=\"let component of data.components\">\n                    <formio-component [component]=\"component\" [form]=\"control\" [events]=\"events\" (render)=\"onRender()\"></formio-component>\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n"),
        panel: getTemplate("<div [formGroup]=\"form\" class=\"form-group\">\n    <div class=\"panel\" [ngClass]=\"{\n        \'panel-default\': component.settings.theme==\'default\',\n        \'panel-primary\': component.settings.theme==\'primary\',\n        \'panel-success\': component.settings.theme==\'success\',\n        \'panel-info\': component.settings.theme==\'info\',\n        \'panel-warning\': component.settings.theme==\'warning\',\n        \'panel-danger\': component.settings.theme==\'danger\'\n    }\">\n        <div *ngIf=\"component.settings.title\" class=\"panel-heading\">\n            <h3 class=\"panel-title\">{{component.settings.title}}</h3>\n        </div>\n        <div class=\"panel-body\">\n            <formio-components [components]=\"component.settings.components\" [form]=\"component.control\" [submission]=\"submission\" [data]=\"data\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n        </div>\n    </div>\n</div>\n"),
        fieldset: getTemplate("<div [formGroup]=\"form\" class=\"form-group\">\n    <fieldset>\n        <legend *ngIf=\"component.settings.legend\">{{ component.settings.legend }}</legend>\n        <formio-components [components]=\"component.settings.components\" [form]=\"component.control\" [submission]=\"submission\" [data]=\"data\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n    </fieldset>\n</div>\n"),
        well: getTemplate("<div [formGroup]=\"form\" class=\"form-group\">\n    <div class=\"well\">\n        <formio-components [components]=\"component.settings.components\" [form]=\"component.control\" [submission]=\"submission\" [data]=\"data\" [events]=\"events\" (render)=\"onRender()\"></formio-components>\n    </div>\n</div>\n"),
        datetime: {
            component: {
                template:"<div [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\"><h3>{{ component.label }}</h3></label>\n    <div class=\"input-group\">\n        <input [formControl]=\"component.control\" value=\"{{showDateTime ? (getDate() ? (getDate()| date: dateFormat):\'\') +\' \'+ (time?(time | date:\'HH:mm\'):\'\'):\'\' }}\" [type]=\"text\" [placeholder]=\"component.settings.placeholder\" class=\"form-control\" (click)=\"selectDate()\" />\n        <span class=\"input-group-addon\" (click)=\"selectDate()\"><i *ngIf=\"component.settings.enableDate\" class=\"glyphicon glyphicon-calendar\"></i><i *ngIf=\"!component.settings.enableDate\" class=\"glyphicon glyphicon-time\"></i></span>\n    </div>\n    <div *ngIf=\"displayDate\" class=\"showDate\">\n        <datepicker ngDefaultControl [(ngModel)]=\"selectedDate\" (click)=\"selectTime(selectedDate)\" [dateDisabled]=\"component.settings.enableDate\" [showWeeks]=\"component.settings.datePicker.showWeeks\" [startingDay]=\"component.settings.datePicker.startingDay\" [minMode]=\"component.settings.datePicker.minMode\" [maxMode]=\"component.settings.datePicker.maxMode\" [yearRange]=\"component.settings.datePicker.yearRange\" [datepickerMode]=\"component.settings.datePicker.datepickerMode\"></datepicker>\n        <div class=\"buttonsSpace\">\n            <span class=\"btn-group\">\n                <button type=\"button\" class=\"btn btn-sm btn-info\" (click)=\"today()\">Today</button>\n                <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"clear()\">Clear</button>\n            </span>\n            <span class=\"btn-group pull-right\">\n                <button *ngIf=\"component.settings.enableTime\" type=\"button\" class=\"btn btn-sm btn-default\" (click)=\"selectFirstTime()\">Time</button>\n                <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"close()\">Close</button>\n            </span>\n        </div>\n    </div>\n    <div *ngIf=\"displayTime\" class=\"showTime\">\n        <timepicker ngDefaultControl [(ngModel)]=\"time\" (click)=\"checkDate()\" [hourStep]=\"component.settings.timePicker.hourStep\" [minuteStep]=\"component.settings.timePicker.minuteStep\" [showMeridian]=\"component.settings.timePicker.showMeridian\" [readonlyInput]=\"component.settings.timePicker.readonlyInput\" [mousewheel]=\"component.settings.timePicker.mousewheel\" [arrowkeys]=\"component.settings.timePicker.arrowkeys\"></timepicker>\n        <div class=\"buttonsSpace\">\n            <span class=\"btn-group pull-left\">\n                <button type=\"button\" class=\"btn btn-sm btn-info\" (click)=\"now()\">Now</button>\n                <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"clear()\">Clear</button>\n            </span>\n            <span class=\"btn-group pull-right\">\n                <button *ngIf=\"component.settings.enableDate\" type=\"button\" class=\"btn btn-sm btn-default\" (click)=\"selectDate()\">Date</button>\n                <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"close()\">Close</button>\n            </span>\n        </div>\n    </div>\n</div>\n",
                styles: []
            },
            module: {
                imports: [DatepickerModule, TimepickerModule]
            }
        },
        selectboxes: getTemplate("<div [formGroup]=\"form\" class=\"form-group {{component.settings.customClass}}\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">{{ component.label }}</label>\n    <div class=\"input-group\">\n        <div *ngFor=\"let option of component.settings.values; let i = index;\" [ngClass]=\"{\'checkbox-inline\': component.settings.inline==true,\'checkbox\': component.settings.inline==false}\">\n            <label [attr.for]=\"component.settings.key\">\n                <input type=\"checkbox\" [checked]=\"selected[option.value] ? option.value : \'\' \" (change)=\"selected[option.value] ? (selected[option.value] = false) : (selected[option.value] = true)\" [formControl]=\"component.control\"  name=\"{{component.settings.key}}\" value=\"{{option.value}}\"/>\n                {{ option.label }}\n            </label>\n        </div>\n    </div>\n</div>\n"),
        content: getTemplate("<div id=\"{{component.settings.key}}\">\n    <div [innerHtml] = component.settings.html></div>\n</div>\n"),
        html: getTemplate("<div id=\"{{component.settings.key}}\">\n    <div innerHtml = {{element}}></div>\n</div>\n"),
        currency: getTemplate("<div [formGroup]=\"form\" class=\"form-group {{component.settings.customClass}}\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">{{ component.label }}</label>\n    <div [ngClass]=\"{\'input-group\': (component.settings.prefix || component.settings.suffix)}\">\n        <div *ngIf=\"component.settings.prefix\" class=\"input-group-addon\">{{ component.settings.prefix }}</div>\n        <input type=\"text\" [formControl]=\"component.control\" [(ngModel)]=\"inputs\" (keyup)=\"inputs = onChange(inputs)\" [id]=\"component.settings.key\" [placeholder]=\"component.settings.placeholder\" class=\"form-control\" />\n        <div *ngIf=\"component.settings.suffix\" class=\"input-group-addon\">{{ component.settings.suffix }}</div>\n    </div>\n</div>\n"),
        select: {
            component: {
                template: "<div [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\"><h3>{{ component.label }}</h3></label>\n    <ng-select [items]=\"component.settings.data.values\"\n               (data)=\"refreshValue($event)\"\n               [multiple]=\"component.settings.multiple\"\n               placeholder=\"{{component.settings.placeholder}}\" >\n    </ng-select>\n</div>\n"
            },
            module: {
                imports: [SelectModule]
            }
        },
        survey: getTemplate("<div [formGroup]=\"form\" class=\"form-group {{component.settings.customClass}}\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\">{{ component.label }}</label>\n    <div class=\"table-responsive\">\n        <table class=\"table table-striped table-bordered\">\n            <thead>\n            <tr>\n                <td></td>\n                <td  *ngFor=\"let control of component.settings.values;\" style=\"text-align: center;\">\n                    {{control.label}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let row of component.settings.questions;\">\n                <td>{{row.label}}</td>\n                <td *ngFor=\"let col of component.settings.values;\" style=\"text-align: center;\">\n                    <input type=\"radio\" [checked]=\"valueObj[row.value]==col.value ? true : false\" (click)=\"str=getValue(row.value, col.value)\" [value]=\"str\" id=\"{{row.label+\'-\'+col.label}}\" name=\"{{row.label+\'-\'+col.label}}\" [formControl]=\"component.control\" />\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n"),
        resource: {
            component: {
                template: "<div class=\"{{component.settings.customClass}}\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\"><h3>{{ component.label }}</h3></label>\n    <ng-select [items]=\"component.settings.defaultValue\"\n               (data)=\"refreshValue($event)\"\n               [multiple]=\"component.settings.multiple\"\n               placeholder=\"{{component.settings.placeholder}}\"\n               (typed)=\"searchData($event)\">\n    </ng-select>\n</div>\n"
            },
            module: {
                imports: [SelectModule]
            }
        },
        address: {
            component: {
                template: "<div class=\"{{component.settings.customClass}}\" [ngClass]=\"{\'required\': (component.settings.validate && component.settings.validate.required)}\">\n    <label *ngIf=\"component.label\" [attr.for]=\"component.settings.key\" class=\"control-label\"><h3>{{ component.label }}</h3></label>\n    <ng-select [items]=\"selectedItem\"\n               (data)=\"refreshValue($event)\"\n               [multiple]=\"component.settings.multiple\"\n               placeholder=\"{{component.settings.placeholder}}\"\n               (typed)=\"selectedData($event)\">\n    </ng-select>\n</div>\n"
            },
            module: {
                imports: [SelectModule]
            }
        }
    }
};
